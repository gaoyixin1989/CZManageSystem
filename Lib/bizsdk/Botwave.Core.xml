<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Botwave.Core</name>
    </assembly>
    <members>
        <member name="T:Botwave.Web.Themes.ThemeHelper">
            <summary>
            主题辅助类.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeHelper.ThemesRootAbsolutPath">
            <summary>
            主题存放的相对根目录.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeHelper.ThemesRootPath">
            <summary>
            主题存放的根目录.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeHelper.syncLock">
            <summary>
            同步锁.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeHelper.ThemeHeaders">
            <summary>
            主题头部信息内容(key:主题名称, value: html).
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeHelper.#cctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeHelper.InitTheme(System.Web.UI.Page)">
            <summary>
            初始化指定页面的主题.
            </summary>
            <param name="currentPage"></param>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeHelper.GetTheme(System.String)">
            <summary>
            获取主题引用代码.
            </summary>
            <param name="themeName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeHelper.GetThemeHeader(System.String)">
            <summary>
            生成指定主题的头部  HTML 引用内容.
            </summary>
            <param name="themeName"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.PageBase">
            <summary>
            页面基础类.
            </summary>
        </member>
        <member name="F:Botwave.Web.PageBase.AppName">
            <summary>
            应用程序名称.
            </summary>
        </member>
        <member name="M:Botwave.Web.PageBase.OnPreInit(System.EventArgs)">
            <summary>
            初始化的前续处理.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.PageBase.OnInit(System.EventArgs)">
            <summary>
            初始化.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowError">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowError(System.String)">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
            <param name="message">错误信息.</param>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowError(System.String,System.String)">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
            <param name="message">错误信息.</param>
            <param name="returnUrl">返回的 URL 地址.</param>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowSuccess">
            <summary>
            在成功页面显示默认成功信息.
            </summary>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowSuccess(System.String)">
            <summary>
            在成功页面显示指定成功消息.
            </summary>
            <param name="message">消息.</param>
        </member>
        <member name="M:Botwave.Web.PageBase.ShowSuccess(System.String,System.String)">
            <summary>
            在成功页面显示默认成功信息.
            </summary>
            <param name="message">消息.</param>
            <param name="returnUrl">返回的 URL 地址.</param>
        </member>
        <member name="P:Botwave.Web.PageBase.AppPath">
            <summary>
            应用程序路径.
            </summary>
        </member>
        <member name="P:Botwave.Web.PageBase.CurrentMessage">
            <summary>
            系统提示信息
            </summary>
        </member>
        <member name="T:Botwave.Web.HttpHandler.DownloadHandler">
            <summary>
            下载处理类.
            传递参数为:
               1. {download.ashx}?id={id};
               2. {download.ashx}?path={path}displayName={displayName};
                    例如: {download.ashx}?path=contrib/workflow/res/templates/workflow.xml&amp;displayName=流程配置文件.
            <example>下载路径传递参数模式:
               1. {download.ashx}?id={id};
               2. {download.ashx}?path={path}displayName={displayName};
                    例如: {download.ashx}?path=contrib/workflow/res/templates/workflow.xml&amp;displayName=流程配置文件.
            </example>
            </summary>
        </member>
        <member name="F:Botwave.Web.HttpHandler.DownloadHandler.FileNotExistsMessage">
            <summary>
            下载文件不存在时的提示信息.
            </summary>
        </member>
        <member name="F:Botwave.Web.HttpHandler.DownloadHandler.AppDataDirectory">
            <summary>
            App_Data 目录.
            </summary>
        </member>
        <member name="M:Botwave.Web.HttpHandler.DownloadHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Botwave.Web.HttpHandler.DownloadHandler.DownloadFile(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            下载文件.
            </summary>
            <param name="res"></param>
            <param name="filePath"></param>
            <param name="displayName"></param>
        </member>
        <member name="M:Botwave.Web.HttpHandler.DownloadHandler.DownloadFile(System.Web.HttpResponse,System.String,System.String,System.Boolean)">
            <summary>
            下载文件.
            </summary>
            <param name="res"></param>
            <param name="filePath"></param>
            <param name="displayName"></param>
            <param name="shouldDelete"></param>
        </member>
        <member name="M:Botwave.Web.HttpHandler.DownloadHandler.DownloadToLocal(System.String,System.String)">
            <summary>
            下载远程文件到本地.
            </summary>
            <param name="fileUrl"></param>
            <param name="localPath"></param>
        </member>
        <member name="M:Botwave.Web.HttpHandler.DownloadHandler.DownloadAttachment(System.Web.HttpContext,System.String)">
            <summary>
            下载指定编号的附件.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
        </member>
        <member name="P:Botwave.Web.HttpHandler.DownloadHandler.IsReusable">
            <summary>
            可以再度使用.
            </summary>
        </member>
        <member name="T:Botwave.Web.HttpHandler.CheckCodeHandler">
            <summary>
            验证码处理类.
            </summary>
        </member>
        <member name="F:Botwave.Web.HttpHandler.CheckCodeHandler.CheckCode_Key">
            <summary>
            验证码存储 Key.
            </summary>
        </member>
        <member name="F:Botwave.Web.HttpHandler.CheckCodeHandler.CheckCode_Length">
            <summary>
            验证码长度.
            </summary>
        </member>
        <member name="M:Botwave.Web.HttpHandler.CheckCodeHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Botwave.Web.HttpHandler.CheckCodeHandler.GenerateCheckCode(System.Int32)">
            <summary>
            生成验证码.
            </summary>
            <param name="length">验证码的长度.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.HttpHandler.CheckCodeHandler.DrawImage(System.String,System.Web.HttpResponse)">
            <summary>
            绘出验证码.
            </summary>
            <param name="checkCode">验证码.</param>
            <param name="response">响应输出流.</param>
        </member>
        <member name="P:Botwave.Web.HttpHandler.CheckCodeHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例.
            </summary>
        </member>
        <member name="T:Botwave.Message.IMessageSender">
            <summary>
            消息发送者.
            </summary>
        </member>
        <member name="M:Botwave.Message.IMessageSender.SendMessage(System.String,System.String,System.String,System.String[])">
            <summary>
            发送消息.
            </summary>
            <param name="type">1代表邮件,2代表短信,3表示可回复的短信.可组合,如"12"表示同时发送短信邮件.</param>
            <param name="body">消息内容</param>
            <param name="from">发送人</param>
            <param name="to">接收人</param>
        </member>
        <member name="M:Botwave.Message.IMessageSender.SendMessage(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            发送消息.
            </summary>
            <param name="type">1代表邮件,2代表短信,3表示可回复的短信.可组合,如"12"表示同时发送短信邮件.</param>
            <param name="title">标题</param>
            <param name="body">消息内容</param>
            <param name="from">发送人</param>
            <param name="to">接收人</param>
        </member>
        <member name="M:Botwave.Message.IMessageSender.SendMessage(System.String,System.String,System.Object,System.String,System.String[])">
            <summary>
            发送消息.
            </summary>
            <param name="type">1代表邮件,2代表短信,3表示可回复的短信.可组合,如"12"表示同时发送短信邮件.</param>
            <param name="body">消息内容</param>
            <param name="ext">扩展参数</param>
            <param name="from">发送人</param>
            <param name="to">接收人</param>
        </member>
        <member name="M:Botwave.Message.IMessageSender.SendMessage(System.String,System.String,System.String,System.Object,System.String,System.String[])">
            <summary>
            发送消息.
            </summary>
            <param name="type">1代表邮件,2代表短信,3表示可回复的短信.可组合,如"12"表示同时发送短信邮件.</param>
            <param name="title">标题</param>
            <param name="body">消息内容</param>
            <param name="ext">扩展参数</param>
            <param name="from">发送人</param>
            <param name="to">接收人</param>
        </member>
        <member name="T:Botwave.Web.UpDownLoadUtils">
            <summary>
            UpDownLoadUtils 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.UploadFiles(System.String,System.String[],System.Boolean)">
            <summary>
            上传多个文件.
            </summary>
            <param name="saveDirectory"></param>
            <param name="controlNames"></param>
            <param name="isGenUniqueFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.CheckPostedFile(System.Web.HttpPostedFile)">
            <summary>
            检查是否存在文件.
            </summary>
            <param name="uploadFile"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.UploadFile(System.String,System.Web.HttpPostedFile)">
            <summary>
            删除文件.
            </summary>
            <param name="saveDirectory"></param>
            <param name="uploadFile"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.UploadFile(System.String,System.String)">
            <summary>
            上传文件.
            </summary>
            <param name="saveDirectory"></param>
            <param name="controlName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.DownLoadFile(System.String,System.String)">
            <summary>
            下载文件.
            </summary>
            <param name="srcURL"></param>
            <param name="destFileName"></param>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.ExportFile(System.String,System.String,System.Boolean)">
            <summary>
            下载文件.
            </summary>
            <param name="srcFileName">源文件名</param>
            <param name="sDisplayFileName">在客户端保存的文件名</param>
            <param name="mustDeleteFile">是否删除源文件</param>
        </member>
        <member name="M:Botwave.Web.UpDownLoadUtils.GetContentType(System.String)">
            <summary>
            由文件的后缀名获取文件的ContentType.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.Themes.ThemeInfo">
            <summary>
            主题信息.
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeInfo.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="name"></param>
            <param name="title"></param>
            <param name="preview"></param>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="name"></param>
            <param name="title"></param>
            <param name="preview"></param>
            <param name="header"></param>
        </member>
        <member name="P:Botwave.Web.Themes.ThemeInfo.Index">
            <summary>
            索引.
            </summary>
        </member>
        <member name="P:Botwave.Web.Themes.ThemeInfo.Name">
            <summary>
            主题名称.
            </summary>
        </member>
        <member name="P:Botwave.Web.Themes.ThemeInfo.Title">
            <summary>
            主题显示文本标题.
            </summary>
        </member>
        <member name="P:Botwave.Web.Themes.ThemeInfo.Preview">
            <summary>
            主题的预览图片.
            </summary>
        </member>
        <member name="P:Botwave.Web.Themes.ThemeInfo.Header">
            <summary>
            页面标题类.
            </summary>
        </member>
        <member name="T:Botwave.Crypto.SHA256Service">
            <summary>
            SHA256 散列算法密码服务实现类.
            </summary>
        </member>
        <member name="T:Botwave.Crypto.ICryptoService">
            <summary>
            加密解密服务接口.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.ICryptoService.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes">字节数组明文.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.ICryptoService.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.ICryptoService.Decrypt(System.Byte[])">
            <summary>
            解密指定字节数组.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.ICryptoService.Decrypt(System.String)">
            <summary>
            解密指定字符串.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA256Service.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.SHA256Service.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA256Service.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA256Service.Decrypt(System.Byte[])">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA256Service.Decrypt(System.String)">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.StringUtils">
            <summary>
            字符串辅助类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.StringUtils.CnLength(System.String)">
            <summary>
            计算中文字符串长度.
            </summary>
            <param name="cnstr"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Repeat(System.String,System.Int32)">
            <summary>
            累加字符串.
            </summary>
            <param name="str"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.IsInSequence(System.String,System.Char,System.String)">
            <summary>
            验证input是否在以separator分隔的序列sequence中.
            </summary>
            <param name="sequence"></param>
            <param name="separator"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Split(System.String,System.String)">
            <summary>
            拆分字符串.
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Truncate(System.String,System.Int32,System.String)">
            <summary>
            截断并补齐字符串.
            </summary>
            <param name="s"></param>
            <param name="maxlength"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.TruncateCnStr(System.String,System.Int32,System.String)">
            <summary>
            截断并补齐字符串(中文)
            </summary>
            <param name="s"></param>
            <param name="maxLength"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Join(System.Collections.Generic.IList{System.String})">
            <summary>
            合并字符串列表为一个字符串.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Join(System.Collections.Generic.IList{System.String},System.String,System.String,System.String)">
            <summary>
            合并字符串.
            </summary>
            <param name="list"></param>
            <param name="perfix"></param>
            <param name="postfix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Join(System.String[],System.String,System.String,System.String)">
            <summary>
            合并字符串.
            </summary>
            <param name="arr"></param>
            <param name="perfix"></param>
            <param name="postfix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.Join(System.String[],System.String)">
            <summary>
            合并字符串.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.JoinByStringBuilder(System.String[],System.String)">
            <summary>
            合并字符串.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.JoinByString(System.String[],System.String)">
            <summary>
            合并字符串.
            </summary>
            <param name="arr"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.AlignLeft(System.String,System.Int32,System.Char)">
            <summary>
            向左对齐.
            </summary>
            <param name="s"></param>
            <param name="length"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.AlignRight(System.String,System.Int32,System.Char)">
            <summary>
            向右对齐.
            </summary>
            <param name="s"></param>
            <param name="length"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.GetSplitAfterStr(System.String,System.String)">
            <summary>
            获得最后一个匹配项后的字符串.
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.HtmlEncode(System.Object)">
            <summary>
            替换html中的特殊字符.
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.StringUtils.HtmlDecode(System.Object)">
            <summary>
            恢复html中的特殊字符 .
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.RequestTracker.RequestTrackerHttpModule">
            <summary>
            请求跟踪 HttpModule 类.
            </summary>
        </member>
        <member name="M:Botwave.Web.RequestTracker.RequestTrackerHttpModule.Dispose">
            <summary>
            销毁.
            </summary>
        </member>
        <member name="M:Botwave.Web.RequestTracker.RequestTrackerHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Botwave.Web.RequestTracker.RequestTrackerHttpModule.LogRequest(System.Object,System.EventArgs)">
            <summary>
            记录请求.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.TestDynamicSitePathHandler">
            <summary>
            动态网站地图路径节点处理的测试实现类.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.IDynamicSitePathHandler">
            <summary>
            动态网站地图节点处理器接口.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.IDynamicSitePathHandler.Handle(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IList{Botwave.Web.Controls.ExtendedSiteMap.PathNode})">
            <summary>
            处理动态路径节点.
            </summary>
            <param name="url">当前请求的 URL 地址.</param>
            <param name="parameters">查询字符串的参数数组.</param>
            <param name="pathNodes">已有网站路径节点集合.</param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.TestDynamicSitePathHandler.Handle(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IList{Botwave.Web.Controls.ExtendedSiteMap.PathNode})">
            <summary>
            处理网站地图路径节点.
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <param name="pathNodes"></param>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.PathNode">
            <summary>
            路径节点.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNode.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNode.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="title">链接显示标题文本.</param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNode.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="url">路径链接地址.</param>
            <param name="title">链接显示标题文本.</param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNode.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="url">路径链接地址.</param>
            <param name="title">链接显示标题文本.</param>
            <param name="description">链接描述.</param>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNode.Url">
            <summary>
            路径链接地址.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNode.Title">
            <summary>
            链接显示标题文本.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNode.Description">
            <summary>
            链接描述.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode">
            <summary>
            网站地图文件中路径节点类.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.Url">
            <summary>
            路径链接地址.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.MappedUrl">
            <summary>
            获取节点的被映射到的 URL 地址.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.DynamicType">
            <summary>
            路径动态实现的类型名称, 用于反射实例化.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.Visible">
            <summary>
            当前节点的可视性.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.Target">
            <summary>
            链接转向目标.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.Properties">
            <summary>
            属性集合.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.DynamicHandler">
            <summary>
            动态调用接口对象.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.MapPathNode.Item(System.String)">
            <summary>
            节点的属性索引器,只读.
            </summary>
            <param name="propertyName">属性的名称.</param>
            <returns>属性的值.</returns>
        </member>
        <member name="T:Botwave.Message.DefaultMessageSender">
            <summary>
            默认的消息发送者.
            </summary>
        </member>
        <member name="P:Botwave.Message.DefaultMessageSender.MessageSenderFactory">
            <summary>
            消息发送者工厂.
            </summary>
        </member>
        <member name="T:Botwave.Commons.Threading.SyncCallerHost">
            <summary>
            同步调用宿主类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.Threading.SyncCallerHost.Run(Botwave.Commons.Threading.ISyncCaller)">
            <summary>
            运行指定调用接口.
            </summary>
            <param name="syncCaller"></param>
        </member>
        <member name="T:Botwave.Commons.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            对连接执行 Transact-SQL 语句并返回受影响的行数.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String)">
            <summary>
            执行 Transact-SQL 语句并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行 Transact-SQL 语句并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.String,System.Object[])">
            <summary>
            执行 Transact-SQL 语句并返回结果数据集.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
             将 System.Data.SqlClient.SqlCommand.CommandText 发送到 System.Data.SqlClient.SqlCommand.Connection 并生成一个 System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            将 System.Data.SqlClient.SqlCommand.CommandText 发送到 System.Data.SqlClient.SqlCommand.Connection 并生成一个 System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            将 System.Data.SqlClient.SqlCommand.CommandText 发送到 System.Data.SqlClient.SqlCommand.Connection 并生成一个 System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="spName"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定存储过程，并返回受影响的行数.
            </summary>
            <param name="spName"></param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDatasetTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定存储过程，并返回查询所返回的结果数据集.
            </summary>
            <param name="spName"></param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReaderTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定存储过程，并返回查询所返回的结果集的 SqlDataReader 对象.
            </summary>
            <param name="spName"></param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalarTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定存储过程，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="spName"></param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.UpdateDataset(System.String,System.Data.SqlClient.SqlParameter[],System.Data.DataSet,System.String)">
            <summary>
            更新数据集对象.
            </summary>
            <param name="spName"></param>
            <param name="parms"></param>
            <param name="dataSet"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.IsArgumentsSqlParameter(System.Object[])">
            <summary>
            验证是否参数为SqlParameter
            避免当传入参数为SqlParameter[]时，还要通过SqlHelperParameterCache.GetSpParameterSet(connectionString, spName)来获取
            这样当Cache不存在或已效时，会导致每次访问都执行SqlCommandBuilder.DeriveParameters(cmd)，从而增加数据库访问次数
            </summary>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.GetSqlParameterArray(System.Object[])">
            <summary>
            将params object[] parameterValues转换为SqlParameter[]
            之前需要验证IsArgumentsSqlParameter(params object[] parameterValues)
            </summary>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Botwave.Commons.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="P:Botwave.Commons.SqlHelper.ConnectionString">
            <summary>
            数据库连接字符串.
            </summary>
        </member>
        <member name="T:Botwave.Commons.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Botwave.Commons.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Botwave.Commons.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Botwave.Commons.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Botwave.Commons.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler">
            <summary>
            URL 重写配置处理类.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置节点对象.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.Init">
            <summary>
            初始化 UrlRewriterSectionHandler 对象.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.InitSection(System.Xml.XmlNode)">
            <summary>
            初始化节点数据.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.GetRewriterProperty(System.Xml.XmlNode)">
            <summary>
            获取 RewriterProperty 对象.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema">
            <summary>
            URL 重写架构类.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Section_UrlRewriter">
            <summary>
            URL 重写配置节点名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Element_Rewriter">
            <summary>
            Rewriter 节点名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Attribute_Enable">
            <summary>
            Enable 属性名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Attribute_Path">
            <summary>
            Path 属性名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Attribute_Url">
            <summary>
            URL 属性名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterSectionHandler.RewriterShema.Attribute_Pattern">
            <summary>
            Pattern 属性名称.
            </summary>
        </member>
        <member name="T:Botwave.Web.MessageHelper">
            <summary>
            Web 消息辅助类.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.AppName">
            <summary>
            网站应用系统名称(签名).
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.Message_Failture">
            <summary>
            操作错误显示的消息内容.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.Message_Success">
            <summary>
            操作成功显示的消息内容.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.Message_ArgumentException">
            <summary>
            参数错误显示的消息内容.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.Message_NoPermission">
            <summary>
            无权限显示的消息内容.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.MessagePage_Success">
            <summary>
            成功消息显示的页面.
            </summary>
        </member>
        <member name="F:Botwave.Web.MessageHelper.MessagePage_Error">
            <summary>
            错误消息显示的页面.
            </summary>
        </member>
        <member name="M:Botwave.Web.MessageHelper.ShowMessagePage(System.String,System.String,System.String)">
            <summary>
            显示消息页面.
            </summary>
            <param name="targetUrl"></param>
            <param name="message"></param>
            <param name="returnUrl"></param>
        </member>
        <member name="P:Botwave.Web.MessageHelper.MessageContent">
            <summary>
            获取或设置当前消息内容.
            </summary>
        </member>
        <member name="T:Botwave.Crypto.TripleDESService">
            <summary>
            TripleDES 密码服务实现类.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="key">密钥.</param>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="key">密钥.</param>
            <param name="iv"></param>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.Decrypt(System.Byte[])">
            <summary>
            解密指定字节数组.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.Decrypt(System.String)">
            <summary>
            解密指定字符串.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.GetLegalKey">
            <summary>
            获得密钥.
            </summary>
            <returns>密钥.</returns>
        </member>
        <member name="M:Botwave.Crypto.TripleDESService.GetLegalIV">
            <summary>
            获得初始向量 IV.
            </summary>
            <returns>初试向量 IV.</returns>
        </member>
        <member name="T:Botwave.Crypto.SHA1Service">
            <summary>
            SHA1 散列算法密码服务实现类.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.SHA1Service.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.SHA1Service.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA1Service.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA1Service.Decrypt(System.Byte[])">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.SHA1Service.Decrypt(System.String)">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.TripleDESHelper">
            <summary>
            TripleDESHelper 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Commons.TripleDESHelper.Encrypt(System.String)">
            <summary>
            加密.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESHelper.Decrypt(System.String)">
            <summary>
            解密.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESHelper.Encrypt(System.String,System.String)">
            <summary>
            加密.
            </summary>
            <param name="key"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESHelper.Decrypt(System.String,System.String)">
            <summary>
            解密.
            </summary>
            <param name="key"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.TripleDESService">
            <summary>
            三重DES.
            </summary>
        </member>
        <member name="F:Botwave.Commons.TripleDESService.Key">
            <summary>
            密钥值.
            </summary>
        </member>
        <member name="F:Botwave.Commons.TripleDESService.IV">
            <summary>
            初始向量值.
            </summary>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.#ctor(System.String)">
            <summary>
            对称加密类的构造函数.
            </summary>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.#ctor(System.String,System.String)">
            <summary>
            对称加密类的构造函数.
            </summary>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.GetLegalKey">
            <summary>
            获得密钥.
            </summary>
            <returns>密钥.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.GetLegalIV">
            <summary>
            获得初始向量 IV.
            </summary>
            <returns>初试向量 IV.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Encrypt(System.String)">
            <summary>
            加密方法.
            </summary>
            <param name="Source">待加密的串.</param>
            <returns>经过加密的串.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Decrypt(System.String)">
            <summary>
            解密方法.
            </summary>
            <param name="Source">待解密的串.</param>
            <returns>经过解密的串.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Encrypt(System.Byte[])">
            <summary>
            加密方法byte[] to byte[].
            </summary>
            <param name="Source">待加密的byte数组.</param>
            <returns>经过加密的byte数组.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Decrypt(System.Byte[])">
            <summary>
            解密方法byte[] to byte[].
            </summary>
            <param name="Source">待解密的byte数组.</param>
            <returns>经过解密的byte数组.</returns>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Encrypt(System.String,System.String)">
            <summary>
            加密方法File to File.
            </summary>
            <param name="inFileName">待加密文件的路径.</param>
            <param name="outFileName">待加密后文件的输出路径.</param>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Decrypt(System.String,System.String)">
            <summary>
            解密方法File to File.
            </summary>
            <param name="inFileName">待解密文件的路径.</param>
            <param name="outFileName">待解密后文件的输出路径.</param>
        </member>
        <member name="M:Botwave.Commons.TripleDESService.Dispose">
            <summary>
            销毁.
            </summary>
        </member>
        <member name="T:Botwave.Commons.Threading.ISyncCaller">
            <summary>
            同步调用服务接口.
            </summary>
        </member>
        <member name="M:Botwave.Commons.Threading.ISyncCaller.Call">
            <summary>
            执行调用.
            </summary>
        </member>
        <member name="T:Botwave.Commons.DateTimeUtils">
            <summary>
            日期/时间辅助类.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DateTimeUtils.MinValue">
            <summary>
            最小时间值.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DateTimeUtils.MaxValue">
            <summary>
            最大时间值.
            </summary>
        </member>
        <member name="M:Botwave.Commons.DateTimeUtils.Resolve(System.DateTime,System.DateTime)">
            <summary>
            将时间解析为易读的方式.
            </summary>
            <param name="dt"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DateTimeUtils.ResolveInterval(System.DateTime,System.DateTime)">
            <summary>
            比较两个时间，并解析为易读的方式.
            </summary>
            <param name="dt"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DateTimeUtils.ParseDateTime(System.DateTime,System.DateTime)">
            <summary>
            比较两个时间，如果是当天则显示时间,否则显示日期.
            </summary>
            <param name="currentTime">当前时间</param>
            <param name="targetTime">需要分析的时间</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.UrlRewriter.UrlRewriterContext">
            <summary>
            URL 重写上下文.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.WebApplicationPath">
            <summary>
            Web 应用程序路径.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.EnableRewriter">
            <summary>
            是否启用 URL 重写.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.RewriterProperties">
            <summary>
            URL 重写属性列表集合.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.PathFilters">
            <summary>
            URL 重写路径过滤表达式列表.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.RewriteFilter">
            <summary>
            重写 URL 过滤正则表达式.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.UrlRewriterContext.SkipFilter">
            <summary>
            是否跳过重写 URL 的过滤验证.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.#cctor">
            <summary>
            静态构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.GetRewrittenUrl(System.Web.HttpContext)">
            <summary>
            获取当前上下文的重写 URL 路径.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.RewriteUrl(System.Web.HttpContext)">
            <summary>
            重写 URL 路径.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.RewriteUrl(System.Web.HttpContext,System.String,System.String)">
            <summary>
            重写 URL 路径.
            </summary>
            <param name="context">HTTP 当前上下文.</param>
            <param name="path"></param>
            <param name="queryString">查询字符串.</param>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.GetRewriteFilter(System.Collections.Generic.IList{System.String})">
            <summary>
            获取重写 URL 过滤的正则表达式.
            </summary>
            <param name="filters">过滤的路径表达式列表.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterContext.GetRewriteFilterPattern(System.Collections.Generic.IList{System.String})">
            <summary>
            获取重写 URL 过滤的表达式字符串.
            </summary>
            <param name="filters">过滤的路径表达式列表.</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.RequestTracker.RequestLogger">
            <summary>
            请求日志记录器.
            </summary>
        </member>
        <member name="M:Botwave.Web.RequestTracker.RequestLogger.#cctor">
            <summary>
            静态构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.RequestTracker.RequestLogger.Log(System.Web.HttpRequest)">
            <summary>
            记录请求信息.
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager">
            <summary>
            网站地图管理类.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.siteMapNodeName">
            <summary>
            网站地图节点名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.context">
            <summary>
             HTTP 上下文.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.siteMapFile">
            <summary>
            网站地图文件路径.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.dynamicCache">
            <summary>
            网站地图动态节点处理器缓存.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.#cctor">
            <summary>
            静态构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.GetMapPathNodes">
            <summary>
            获取网站地图路径节点集合列表.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.GetMapPathNode(System.Xml.XmlReader)">
            <summary>
            获取网站地图路径扩展项.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.DynamicInvoke(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IList{Botwave.Web.Controls.ExtendedSiteMap.PathNode},Botwave.Web.Controls.ExtendedSiteMap.IDynamicSitePathHandler)">
            <summary>
            调用获取网站路径项集合列表.
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <param name="nodes"></param>
            <param name="invoker"></param>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.UrlReplaceRegex">
            <summary>
            URL 特殊字符替换正则表达式.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.CacheDynamicNode(Botwave.Web.Controls.ExtendedSiteMap.MapPathNode)">
            <summary>
            缓存动态节点对象实例.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.GetDynamicNode(System.String)">
            <summary>
            获取指定 URL 的动态节点对象实例.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.SiteMapManager.GetDynaimicHandler(System.String)">
            <summary>
            获取指定动态类型名的动态调用接口实例.
            </summary>
            <param name="dynamicTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.GoodItemRecord">
            <summary>
            商品项.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.GoodItemRecord.ItemID">
            <summary>
            编号.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.GoodItemRecord.ItemName">
            <summary>
            名称.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.ResultRecord">
            <summary>
            结果记录类.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.From">
            <summary>
            主分析对象.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.To">
            <summary>
            参照分析对象.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.Support">
            <summary>
            支持度.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.Confidence">
            <summary>
            可信度.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.FromCount">
            <summary>
            主分析对象的数量.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.ResultRecord.FromToCount">
            <summary>
            参照分析对象的数量.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.FrequenceSet">
            <summary>
            频度集合类.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="setName"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.SelfConntion(System.Collections.IList)">
            <summary>
            自身连接.
            </summary>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.IsHaveIn(System.Collections.IList,System.String)">
            <summary>
            待添加的值是否已经存在.
            </summary>
            <param name="ds"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.IsContain(System.Collections.IList,System.String)">
            <summary>
            待添加的值重新分解后，是否能够在原集合中全部存在.
            </summary>
            <param name="oldRecord"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.FrequenceSet.CheckLength(System.Collections.IList,System.String)">
            <summary>
            检查长度.
            </summary>
            <param name="oldRecord"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.FrequenceSet.SetName">
            <summary>
            集合名称.
            </summary>
        </member>
        <member name="T:Botwave.Entities.BasicUser">
            <summary>
            用户基础类.
            </summary>
        </member>
        <member name="M:Botwave.Entities.BasicUser.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Entities.BasicUser.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="userName"></param>
            <param name="realname"></param>
        </member>
        <member name="P:Botwave.Entities.BasicUser.UserName">
            <summary>
            用户名.
            </summary>
        </member>
        <member name="P:Botwave.Entities.BasicUser.RealName">
            <summary>
            真实名称.
            </summary>
        </member>
        <member name="T:Botwave.Commons.ExcelUtils">
            <summary>
            ExcelUtils 的摘要说明。
            </summary>
        </member>
        <member name="F:Botwave.Commons.ExcelUtils.DEFAULT_FIRST_SHEET_NAME">
            <summary>
            第一个表(sheet)的默认名称.
            </summary>
        </member>
        <member name="F:Botwave.Commons.ExcelUtils.EXCEL_READ_CONN_STR">
            <summary>
            读取 Excel 文件的连接字符串格式.
            </summary>
        </member>
        <member name="F:Botwave.Commons.ExcelUtils.EXCEL_WRITE_CONN_STR">
            <summary>
            写入 Excel 文件的连接字符串格式.
            </summary>
        </member>
        <member name="F:Botwave.Commons.ExcelUtils.EXCEL_SELECT_STR">
            <summary>
            选择 Excel 数据的表达式字符串.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ReadExcel(System.String,System.String)">
            <summary>
            读取excel文件.
            </summary>
            <param name="fileName">文件名.</param>
            <param name="sheetName">工作表名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ReadExcel(System.String,System.String,System.Boolean)">
            <summary>
            读取excel文件.
            </summary>
            <param name="fileName">文件名.</param>
            <param name="sheetName">工作表名.</param>
            <param name="deleteFileAfterRead">是否在读取之后删除文件.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ReadExcel(System.String,System.String[])">
            <summary>
            读取excel文件.
            </summary>
            <param name="fileName">文件名.</param>
            <param name="sheetNames">多个工作表.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ReadExcel(System.String,System.String[],System.Boolean)">
            <summary>
            读取excel文件.
            </summary>
            <param name="fileName">文件名.</param>
            <param name="sheetNames">多个工作表.</param>
            <param name="deleteFileAfterRead">是否在读取之后删除文件.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ReadExcelSheetNames(System.String)">
            <summary>
            获取excel的sheet名.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.ImportExcel2DB(System.Data.DataTable,System.String,System.String,System.String[0:,0:])">
            <summary>
            导入EXCEL至Sql数据库.
            </summary>
            <param name="srcDt"></param>
            <param name="strConn"></param>
            <param name="destTableName"></param>
            <param name="refFieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataSet,System.String,System.String,System.String,System.String)">
            <summary>
            导出到Excel.
            </summary>
            <param name="dsSrc"></param>
            <param name="tableName"></param>
            <param name="templateExcelFileName"></param>
            <param name="sheetName"></param>
            <param name="destExcelFileName"></param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出到Excel.
            </summary>
            <param name="dtSrc"></param>
            <param name="templateExcelFileName"></param>
            <param name="sheetName"></param>
            <param name="destExcelFileName"></param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataSet,System.String,System.String,System.String,System.String[0:,0:],System.String)">
            <summary>
            导出数据到Excel(有对应的Excel模板文件).
            </summary>
            <param name="dsSrc">源数据集.</param>
            <param name="tableName">要导出的表.</param>
            <param name="templateExcelFileName">对应的Excel模板文件.</param>
            <param name="sheetName">工作簿名.</param>
            <param name="refFieldNames">tableName表中字段与sheetName工作簿字段的对应二维数组.</param>
            <param name="destExcelFileName">目标Excel.</param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataSet,System.String,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            导出数据到Excel(有对应的Excel模板文件).
            </summary>
            <param name="dsSrc">源数据集</param>
            <param name="tableName">要导出的表</param>
            <param name="templateExcelFileName">对应的Excel模板文件</param>
            <param name="sheetName">工作簿名</param>
            <param name="srcFieldNames">数据表中字段</param>
            <param name="destFieldNames">对应Excel的字段</param>
            <param name="destExcelFileName">目标Excel</param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataTable,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            导出数据到Excel(有对应的Excel模板文件)
            </summary>
            <param name="dtSrc">源数据表</param>
            <param name="templateExcelFileName">对应的Excel模板文件</param>
            <param name="sheetName">工作簿名</param>
            <param name="srcFieldNames">数据表中字段</param>
            <param name="destFieldNames">对应Excel的字</param>
            <param name="destExcelFileName">目标Excel</param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.String,System.String[],System.Collections.Generic.IList{System.String[]},System.String)">
            <summary>
            将列表数据导入到Excel中
            </summary>
            <param name="templateExcelFileName"></param>
            <param name="fieldNames"></param>
            <param name="datas"></param>
            <param name="destExcelFileName"></param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.String,System.String,System.String[],System.Collections.Generic.IList{System.String[]},System.String)">
            <summary>
            将列表数据导入到Excel中
            </summary>
            <param name="templateExcelFileName"></param>
            <param name="sheetName"></param>
            <param name="fieldNames"></param>
            <param name="datas"></param>
            <param name="destExcelFileName"></param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Web.UI.Control,System.String)">
            <summary>
            将WebControl数据列表导出至Excel
            </summary>
            <param name="objControl"></param>
            <param name="strFileName"></param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.Export2Excel(System.Data.DataTable,System.String,System.String,System.String[],System.String)">
            <summary>
            导出数据到Excel(有对应的Excel模板文件)
            </summary>
            <param name="dtSrc">源数据表</param>
            <param name="templateExcelFileName">对应的Excel模板文件</param>
            <param name="sheetName">工作簿名</param>
            <param name="srcFieldNames">数据表中字段</param>
            <param name="destExcelFileName">目标Excel</param>
        </member>
        <member name="M:Botwave.Commons.ExcelUtils.IsExcelFile(System.String)">
            <summary>
            判断是否为excel文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Botwave.Log.OperationLog”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Botwave.Log.OperationLog.#ctor”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Botwave.Log.OperationLog.#ctor(System.String,System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:Botwave.Log.OperationLog.OpStartTime”忽略有格式错误的 XML 注释 -->
        <member name="P:Botwave.Log.OperationLog.PortalID">
            <summary>
            用户PORTALID
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.ClientIP">
            <summary>
            客户端IP地址
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.ClientComputerName">
            <summary>
            客户端计算机名称
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.ServerIP">
            <summary>
            服务器IP地址
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.OpEndTime">
            <summary>
            操作结束时间
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.OperationName">
            <summary>
            操作类型名称
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.ExceptionName">
            <summary>
            异常类型名称
            </summary>
        </member>
        <member name="P:Botwave.Log.OperationLog.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.DataCache">
            <summary>
            数据缓存类。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.DataCache.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.DataCache.AddCache(System.String,System.String)">
            <summary>
            向缓存表中保存对应的值.
            </summary>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.DataCache.GetValue(System.String)">
            <summary>
            查找缓存表中是否存在值.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.DataCache.ClearCache">
            <summary>
            清空缓存数据.
            </summary>
        </member>
        <member name="T:Botwave.FileManager.IFileService">
            <summary>
            文件管理服务接口.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.IFileService.Upload(System.IO.Stream,System.String)">
            <summary>
            将上传输入流保存为指定文件.
            </summary>
            <param name="inputStream">要保存的输入流.</param>
            <param name="fileName">保存文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.IFileService.Exist(System.String)">
            <summary>
            指定文件是否存在.
            </summary>
            <param name="fileName">要检查是否存在的文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.IFileService.Delete(System.String)">
            <summary>
            删除指定文件.
            </summary>
            <param name="fileName">要删除的文件名.</param>
            <returns></returns>
        </member>
        <member name="P:Botwave.FileManager.IFileService.UploadRootPath">
            <summary>
            上传文件保存的根目录.
            </summary>
        </member>
        <member name="T:Botwave.Web.UrlRewriter.UrlRewriterModule">
            <summary>
            URL 重写的 HTTP 模块类.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterModule.Dispose">
            <summary>
            销毁 HTTP 模块.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化 HTTP 模块.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.UrlRewriterModule.context_BeginRequest_Rewriter(System.Object,System.EventArgs)">
            <summary>
            重写 URL 请求的委托方法.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Botwave.Web.Controls.DateTimePicker">
            <summary>
            [2008-3-28 (Frank)修正]
            1.增加日期文本输入框的样式类属性.
            2.修正一个页面有多个当前日期选择控件时，重复注册 CSS 样式表和引用日历 JavaScript.
            3.修正 CalendarFolder 路径以"站点相对路径"格式显示.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.DateTimePicker.DateTimeRegex">
            <summary>
            验证时间格式正确与否的正则表达式.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.DateTimePicker.DatePickSpan">
            <summary>
            时间选择文本框控件格式({0}:名称;{1}:值).
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.OnPreRender(System.EventArgs)">
            <summary>
            呈现的前续处理.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.CreateChildControls">
            <summary>
            重写创建子控件方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            重写呈现控件的方法.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.RegisterCalendarScripts(System.String)">
            <summary>
            注册日期选择脚本引用.
            </summary>
            <param name="calendarFolderUrl"></param>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.RegisterCalendarSkin(System.String)">
            <summary>
            注册日期选择的样式文件引用
            </summary>
            <param name="calendarFolderUrl"></param>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.RegisterCssReference(System.Web.UI.Page,System.String)">
            <summary>
            注册样式表文件引用.
            </summary>
            <param name="currentPage"></param>
            <param name="cssFile"></param>
        </member>
        <member name="M:Botwave.Web.Controls.DateTimePicker.RegisterScriptReference(System.Web.UI.Page,System.String)">
            <summary>
            注册脚本引用的方法.
            </summary>
            <param name="currentPage"></param>
            <param name="scriptFilePath"></param>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.Text">
            <summary>
            选择后的日期
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.IsRequired">
            <summary>
            是否验证日期是否填写.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.IsValidateExpression">
            <summary>
            是否验证日期格式是否正确.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.ValidatorDisplay">
            <summary>
            验证显示的类型.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.RequiredErrorMessage">
            <summary>
            验证是否必须填写的错误信息.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.SetFocusOnError">
            <summary>
            当错误是否将焦点放入日期文本框.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.ExpressionErrorMessage">
            <summary>
            验证日期格式的错误信息.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.RequiredValidatorText">
            <summary>
            时间必填验证的提示信息.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.ExpressionValidatorText">
            <summary>
            时间格式验证的提示信息.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.DateType">
            <summary>
            时间输入框的日期显示类型.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.CalendarFolder">
            <summary>
            日期的目录路径（为当前站点相对路径，如在 Calendar 目录下则为：calendar;不含\"../\"）.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.InputBoxCssClass">
            <summary>
            日期输入框（input）的样式类名称.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.Width">
            <summary>
            设置文本框的宽度.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.Height">
            <summary>
            设置文本框的高度.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.DateTimePicker.Controls">
            <summary>
            子控件.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.DateTimePicker.DateFormat">
            <summary>
            日期格式.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.DateTimePicker.DateFormat.OnlyDate">
            <summary>
            如:"yyyy-MM-dd".
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.DateTimePicker.DateFormat.Datetime">
            <summary>
            如:"yyyy-MM-dd HH:mm:ss".
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.CompositeControlDesigner">
            <summary>
            组合式控件设计器.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.CompositeControlDesigner.GetDesignTimeHtml">
            <summary>
            获取设计时 Html.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.CompositeControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            初始化设计器.
            </summary>
            <param name="component"></param>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.LibConst">
            <summary>
            常量类.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.LibConst.DateType">
            <summary>
            日期类型枚举.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Day">
            <summary>
            日.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Week">
            <summary>
            周.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Month">
            <summary>
            月.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Quarter">
            <summary>
            刻.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Year">
            <summary>
            年.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Hour">
            <summary>
            小时.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Minute">
            <summary>
            分.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.Second">
            <summary>
            秒.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.DateType.MilliSecond">
            <summary>
            毫秒.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.LibConst.OperateType">
            <summary>
            操作类型枚举.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.OperateType.Update">
            <summary>
            更新操作.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.OperateType.Insert">
            <summary>
            插入操作.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.LibConst.WatermarkPosition">
            <summary>
            水印位置枚举.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkPosition.WM_TOP_LEFT">
            <summary>
            左上位置.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkPosition.WM_TOP_RIGHT">
            <summary>
            右上位置.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkPosition.WM_BOTTOM_RIGHT">
            <summary>
            右下位置.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkPosition.WM_BOTTOM_LEFT">
            <summary>
            左下位置.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.LibConst.WatermarkType">
            <summary>
            水印类型枚举.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkType.WM_TEXT">
            <summary>
            文本字符串水印.
            </summary>
        </member>
        <member name="F:Botwave.Algorithms.Apriori.LibConst.WatermarkType.WM_IMAGE">
            <summary>
            图片水印.
            </summary>
        </member>
        <member name="T:Botwave.Web.UrlRewriter.RewriterProperty">
            <summary>
            URL 重写属性类.
            </summary>
        </member>
        <member name="F:Botwave.Web.UrlRewriter.RewriterProperty.rewriterRegex">
            <summary>
            重写 URL 的正则表达式对象.
            </summary>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.RewriterProperty.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="pattern">实际的 URL 路径径表达式.</param>
            <param name="url">重写的 URL 路径表达式.</param>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.RewriterProperty.IsMatch(System.String)">
            <summary>
            检查是否匹配指定的 URL 路径.
            </summary>
            <param name="url">URL 路径.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.UrlRewriter.RewriterProperty.RewriteUrl(System.String,System.String)">
            <summary>
            重写 URL.
            </summary>
            <param name="requestUrl"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="P:Botwave.Web.UrlRewriter.RewriterProperty.Pattern">
            <summary>
            实际的 URL 路径径表达式.
            </summary>
        </member>
        <member name="P:Botwave.Web.UrlRewriter.RewriterProperty.Url">
            <summary>
            重写的 URL 路径表达式.
            </summary>
        </member>
        <member name="T:Botwave.GlobalSettings">
            <summary>
            全局配置类.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.Instance">
            <summary>
            实例对象.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.AllowTheme">
            <summary>
            是否允许界面主题.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.ThemeKey">
            <summary>
            界面主题的健值.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.MessageKey">
            <summary>
            系统消息的健值.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.DefaultPage">
            <summary>
            默认工作主页.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.TemporaryDir">
            <summary>
            临时目录.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.UploadPath">
            <summary>
            文件上传路径.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.SuccessMessage">
            <summary>
            操作成功的提示信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.FailMessage">
            <summary>
            操作失败的提示信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.NoPermissionMessage">
            <summary>
            没有对应权限的提示信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.FormatExceptionMessage">
            <summary>
            格式化异常提示信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.ArgumentExceptionMessage">
            <summary>
            参数异常提示信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.ConfirmBeforeDeleteMessage">
            <summary>
            删除操作前的确认信息.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.Address">
            <summary>
            系统访问址.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.Signature">
            <summary>
            系统签名，可用于发送短信/邮件等.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.IsDebugMode">
            <summary>
            应用程序是否处于调试模式，此参数对应用程序级别的异常处理有影响.
            </summary>
        </member>
        <member name="P:Botwave.GlobalSettings.EncryptKey">
            <summary>
            密钥
            </summary>
        </member>
        <member name="T:Botwave.Commons.FileUtils">
            <summary>
            文件辅助类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.FileUtils.CreateFile(System.String,System.String)">
            <summary>
            创建指定文件.
            </summary>
            <param name="fileName"></param>
            <param name="content"></param>
        </member>
        <member name="M:Botwave.Commons.FileUtils.AppendToFile(System.String,System.String)">
            <summary>
            添加指定内容到指定文件.
            </summary>
            <param name="fileName"></param>
            <param name="content"></param>
        </member>
        <member name="M:Botwave.Commons.FileUtils.GetUniqueFileName(System.String)">
            <summary>
            获取唯一文件名.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.FileUtils.GetPostfixName(System.String)">
            <summary>
            获取文件后缀名.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.FileUtils.GetFileNameByPath(System.String)">
            <summary>
            根据路径（非URL）获取文件名.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.FileUtils.GetFileNameByUrl(System.String)">
            <summary>
            根据URL获取文件名.
            </summary>
            <param name="fileUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.FileUtils.GetFileName(System.String)">
            <summary>
            获取文件名称（不包括文件后缀名）.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.UserNotFoundException">
            <summary>
            未找到用户的异常类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.UserNotFoundException.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.UserNotFoundException.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.UserNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="T:Botwave.Commons.RecordNotFoundException">
            <summary>
            未找到相应记录的异常类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.RecordNotFoundException.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.RecordNotFoundException.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.RecordNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.RecordNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="T:Botwave.Commons.ClassNotFoundException">
            <summary>
            为发现类对象的异常类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ClassNotFoundException.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ClassNotFoundException.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ClassNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ClassNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="T:Botwave.Commons.AppException">
            <summary>
            应用程序的错误异常类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.AppException.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.AppException.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.AppException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Commons.AppException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="T:Botwave.Commons.DataTableValidator">
            <summary>
            数据表验证器类。
            </summary>
        </member>
        <member name="M:Botwave.Commons.DataTableValidator.GetValidateType(System.String)">
            <summary>
            获取指定名称的验证器类型.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DataTableValidator.CheckData(System.Data.DataTable,System.String[0:,0:],System.String@)">
            <summary>
            检查输入的表数据.
            </summary>
            <param name="dtInput"></param>
            <param name="rules">e.g. rules={{"列名","允许空值","验证类型","表达式","最小值","最大值","错误信息"},{"colName","false","regex","[a|b]","","","只能输入a或b"},{"colName","false","length","","1","6","输入字符串长度必须小于等于6且大于等于1"}}</param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DataTableValidator.CheckInput(System.String,Botwave.Commons.DataTableValidator.ValidateType,System.String,System.String,System.String)">
            <summary>
            检查输入的数据.
            </summary>
            <param name="input"></param>
            <param name="validateType"></param>
            <param name="expression"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.DataTableValidator.ValidateType">
            <summary>
            数据验证类型枚举.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Any">
            <summary>
            任何值.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Regex">
            <summary>
            正则式.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Length">
            <summary>
            文本长度.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Sequence">
            <summary>
            序列.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Int">
            <summary>
            整数.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Number">
            <summary>
            小数.
            </summary>
        </member>
        <member name="F:Botwave.Commons.DataTableValidator.ValidateType.Date">
            <summary>
            日期.
            </summary>
        </member>
        <member name="T:Botwave.Crypto.MD5Service">
            <summary>
            MD5 散列算法密码服务实现类.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.MD5Service.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.MD5Service.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.MD5Service.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.MD5Service.Decrypt(System.Byte[])">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.MD5Service.Decrypt(System.String)">
            <summary>
            不支持解密，返回参数值.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.Validator">
            <summary>
            Validator 的摘要说明。
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_URL_STR">
            <summary>
            验证URL正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_EMAIL_STR">
            <summary>
            验证Email正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_CNIDCARD_STR">
            <summary>
            验证中华人民共和国身份证号码正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_CNPOSTCODE_STR">
            <summary>
            验证中华人民共和国邮政编码正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_CNPHONE_STR">
            <summary>
            验证中华人民共和国电话号码正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_MOBILE_STR">
            <summary>
            验证手机号码正则式
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_NUMERIC_STR">
            <summary>
            验证数字
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_INTERGER_STR">
            <summary>
            验证整数（不判断是否溢出）
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_DATE_STR">
            <summary>
            验证日期
            </summary>
        </member>
        <member name="F:Botwave.Commons.Validator.REGEX_TIME_STR">
            <summary>
            验证日期(或者时间).
            </summary>
        </member>
        <member name="M:Botwave.Commons.Validator.IsEmail(System.String)">
            <summary>
            验证Email
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsMobile(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsURL(System.String)">
            <summary>
            验证URL
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsCnIdCard(System.String)">
            <summary>
            验证中华人民共和国身份证号码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsCnPostcode(System.String)">
            <summary>
            验证中华人民共和国邮政编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsCnPhone(System.String)">
            <summary>
            验证中华人民共和国电话号码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsNumeric(System.String)">
            <summary>
            验证数字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsInteger(System.String)">
            <summary>
            验证整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsDate(System.String)">
            <summary>
            验证日期
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.Validator.IsDateTime(System.String)">
            <summary>
            验证是否日期/时间
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.Controls.PagingMode">
            <summary>
            可选取的的分页模式
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagingMode.Cached">
            <summary>
            使用页面缓存
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagingMode.NonCached">
            <summary>
            没缓存，用SQL分页
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.PagerStyle">
            <summary>
            可选取的的分页样式
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagerStyle.NextPrev">
            <summary>
            上/下一页
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagerStyle.NextPrevImage">
            <summary>
            以图片显示上/下一页
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagerStyle.NumericPages">
            <summary>
            数字形式
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PagerStyle.DropDownList">
            <summary>
            下拉框形式
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.VirtualRecordCount">
            <summary>
            虚拟分页类
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.VirtualRecordCount.RecordCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.VirtualRecordCount.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.VirtualRecordCount.RecordsInLastPage">
            <summary>
            Last一页的记录数
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.PageChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PageChangedEventArgs.OldPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.PageChangedEventArgs.NewPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.VirtualPager">
            <summary>
            VirtualPager
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.ClearCache">
            <summary>
            Removes any data cached for paging.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.OnPageIndexChanged(Botwave.Web.Controls.PageChangedEventArgs)">
            <summary>
            页面索引改变事件的处理.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.DataBind">
            <summary>
            Fetches and stores the data.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the content to be rendered on the client.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.CreateChildControls">
            <summary>
            Outputs the HTML markup for the control.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.BuildRecordCount(System.Web.UI.WebControls.TableCell)">
             <summary>
            显示总记录数
             </summary>
             <update>Ivan于2007-8-23</update>
             <param name="cell"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.BuildGOTOPage(System.Web.UI.WebControls.TableCell)">
            <summary>
            跳转输入框
            </summary>
            <updater>Gavin于2007-8-6修改</updater>
            <param name="cell"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.BuildNumericPagesUI(System.Web.UI.WebControls.TableCell)">
            <summary>
            生成数字形式按钮
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.BuildNextPrevImageUI(System.Web.UI.WebControls.TableCell)">
            <summary>
            生成以图片显示的分页UI
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.goToPageBtn_Click(System.Object,System.EventArgs)">
            <summary>
            跳转页面事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.firstImg_Click(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.prevImg_Click(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.nextImg_Click(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.VirtualPager.lastImg_Click(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Botwave.Web.Controls.VirtualPager.PageIndexChanged">
            <summary>
            页面索引改变事件.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.CacheDuration">
            <summary>
            PROPERTY CacheDuration
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PagingMode">
            <summary>
            PROPERTY PagingMode
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PagerStyle">
            <summary>
            Indicates the style of the pager's navigation bar.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.ControlToPaginate">
            <summary>
            Gets and sets the name(id) of the control to paginate
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.ItemsPerPage">
            <summary>
            设置或获取每页记录数.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.CurrentPageIndex">
            <summary>
            Gets and sets the index of the currently displayed page.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.SortField">
            <summary>
            Gets and sets the sort-by field. It is mandatory in NonCached mode.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PageCount">
            <summary>
            Gets the number of displayable pages.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.TotalPages">
            <summary>
            Gets and sets the number of pages to display.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.DataSource">
            <summary>
            获取或设置数据源
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.TotalRecordCount">
            <summary>
            总记录数.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PageButtonCount">
            <summary>
            设置或获取按钮数目,仅当PagerStyle设为NumericPages时生效
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.DropDownListWidth">
            <summary>
            当分页样式为DropDownList时,可设置其宽度
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.FirstImageButtonUrl">
            <summary>
            获取首页按钮的图片URL
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PrevImageButtonUrl">
            <summary>
            获取上一页按钮的图片URL
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.NextImageButtonUrl">
            <summary>
            获取下一页按钮的图片URL
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.LastImageButtonUrl">
            <summary>
            获取末尾页按钮的图片URL
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.DisplayCurrentPage">
            <summary>
            确定是否显示页次
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.VirtualPager.PageGroupCount">
            <summary>
            页组索引
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.VirtualPager.PageChangedEventHandler">
            <summary>
            Fires when the pager is about to switch to a new page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Botwave.Log.Layout.OperationLogLayout">
            <summary>
            BotwaveOperationLogLayout
            </summary>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.DefaultConversionPattern">
            <summary>
            Default pattern string for log output. 
            </summary>
            <remarks>
            <para>
            Default pattern string for log output. 
            Currently set to the string <b>"%message%newline"</b> 
            which just prints the application supplied message. 
            </para>
            </remarks>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.DetailConversionPattern">
            <summary>
            A detailed conversion pattern
            </summary>
            <remarks>
            <para>
            A conversion pattern which includes Time, Thread, Logger, and Nested Context.
            Current value is <b>%timestamp [%thread] %level %logger %ndc - %message%newline</b>.
            </para>
            </remarks>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.s_globalRulesRegistry">
            <summary>
            Internal map of converter identifiers to converter types.
            </summary>
            <remarks>
            <para>
            This static map is overridden by the m_converterRegistry instance map
            </para>
            </remarks>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="F:Botwave.Log.Layout.CustomLayout.m_instanceRulesRegistry">
            <summary>
            patterns defined on this PatternLayout only
            </summary>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.#cctor">
            <summary>
            Initialize the global registry
            </summary>
            <remarks>
            <para>
            Defines the builtin global rules.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.#ctor">
            <summary>
            Constructs a PatternLayout using the DefaultConversionPattern
            </summary>
            <remarks>
            <para>
            The default pattern just produces the application supplied message.
            </para>
            <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:Botwave.Log.Layout.CustomLayout.CreatePatternParser(System.String)"/>. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
            <para>
            As per the <see cref="T:log4net.Core.IOptionHandler"/> contract the <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/>
            method must be called after the properties on this object have been
            configured.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.#ctor(System.String)">
            <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
            <remarks>
            <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:Botwave.Log.Layout.CustomLayout.CreatePatternParser(System.String)"/>. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
            <para>
            When using this constructor the <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/> method 
            need not be called. This may not be the case when using a subclass.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.CreatePatternParser(System.String)">
            <summary>
            Create the pattern parser instance
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns>The <see cref="T:log4net.Util.PatternParser"/> that will format the event</returns>
            <remarks>
            <para>
            Creates the <see cref="T:log4net.Util.PatternParser"/> used to parse the conversion string. Sets the
            global and instance rules on the <see cref="T:log4net.Util.PatternParser"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Parse the <see cref="T:log4net.Core.LoggingEvent"/> using the patter format
            specified in the <see cref="P:Botwave.Log.Layout.CustomLayout.ConversionPattern"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.AddConverter(Botwave.Log.Layout.CustomLayout.ConverterInfo)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="converterInfo">the converter info</param>
            <remarks>
            <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:Botwave.Log.Layout.CustomLayout.AddConverter(System.String,System.Type)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.AddConverter(System.String,System.Type)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="name">the name of the conversion pattern for this converter</param>
            <param name="type">the type of the converter</param>
            <remarks>
            <para>
            Add a named pattern converter to this instance. This
            converter will be used in the formatting of the event.
            This method must be called before <see cref="M:Botwave.Log.Layout.CustomLayout.ActivateOptions"/>.
            </para>
            <para>
            The <paramref name="type"/> specified must extend the 
            <see cref="T:log4net.Util.PatternConverter"/> type.
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Layout.CustomLayout.ConversionPattern">
            <summary>
            The pattern formatting string
            </summary>
            <remarks>
            <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
            </remarks>
        </member>
        <member name="T:Botwave.Log.Layout.CustomLayout.ConverterInfo">
            <summary>
            Wrapper class used to map converter names to converter types
            </summary>
            <remarks>
            <para>
            Pattern converter info class used during configuration to
            pass to the <see cref="!:PatternLayout.AddConverter(ConverterInfo)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Layout.CustomLayout.ConverterInfo.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Botwave.Log.Layout.CustomLayout.ConverterInfo.Name">
            <summary>
            Gets or sets the name of the conversion pattern
            </summary>
            <remarks>
            <para>
            The name of the pattern in the format string
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Layout.CustomLayout.ConverterInfo.Type">
            <summary>
            Gets or sets the type of the converter
            </summary>
            <remarks>
            <para>
            The value specified must extend the 
            <see cref="T:log4net.Util.PatternConverter"/> type.
            </para>
            </remarks>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.AprioriIn">
            <summary>
            AprioriIn 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.GetAllItems">
            <summary>
            获取所有的项集合.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.SetMaxRecordCount">
            <summary>
            设置最大记录数.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.GetTheItemBarginedCount(System.String)">
            <summary>
            在所有的交易记录中进行了某些物品交易的记录数.
            </summary>
            <param name="itemIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.GetTheItemBarginedCount(System.Int32)">
            <summary>
            在所有的交易记录中进行了某个物品交易的记录数.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.GetSupport(System.String,System.String)">
            <summary>
            获取支持度.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriIn.GetConfidence(System.String,System.String)">
            <summary>
            获取可信度.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.DataTableName">
            <summary>
            交易日志表名.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.DataTableCodingFieldName">
            <summary>
            交易日志中表示交易号的字段名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.DataTableItemFieldName">
            <summary>
            交易日志中表示项集字段的名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.ItemTableName">
            <summary>
            项集表名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.QueryResultDataCache">
            <summary>
            查询结果的数据缓存器.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriIn.MaxRecordCount">
            <summary>
            最大记录数.
            </summary>
        </member>
        <member name="T:Botwave.FileManager.FileManagerHelper">
            <summary>
            文档管理辅助类.
            </summary>
        </member>
        <member name="F:Botwave.FileManager.FileManagerHelper.FileService">
            <summary>
            文件上传删除服务实现对象.
            </summary>
        </member>
        <member name="F:Botwave.FileManager.FileManagerHelper.Properties">
            <summary>
            配置中的属性节点.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.FileManagerHelper.#cctor">
            <summary>
            静态构造方法.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.FileManagerHelper.GetSharedDirectoryService(System.String)">
            <summary>
            获取指定目录的共享目录方式的文件服务实现类.
            </summary>
            <param name="sharedDirectory">上传文件保存目录.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.FileManagerHelper.GetFileName(System.String)">
            <summary>
            获取指定文件完全限定名称的文件名(不包括文件路径).
            </summary>
            <param name="fullFileName">文件完全限定名称, 即包括文件完整路径.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.FileManagerHelper.GetFileExtensionName(System.String)">
            <summary>
            获取指定文件名的扩展名.
            </summary>
            <param name="fileName">要获取扩展名的文件名.</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.CollectionUtils">
            <summary>
            集合辅助类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.CollectionUtils.IList2StringArray(System.Collections.Generic.IList{System.String})">
            <summary>
            将string的IList转换为string[].
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.CollectionUtils.IList2String(System.Collections.Generic.IList{System.String})">
            <summary>
            将string的IList转换为以逗号分隔的string.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.CollectionUtils.IList2String(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            将string的IList转换为以splitter分隔的string.
            </summary>
            <param name="list"></param>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.Controls.EmployeePicker">
            <summary>
            员工选择控件.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.EmployeePicker.EmployeePickSpan">
            <summary>
            员工选择块 html 格式.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.EmployeePicker.CreateChildControls">
            <summary>
            重写创建子控件的方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.EmployeePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            重写呈现控件的方法.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.UserName">
            <summary>
            用户名.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.HiddenUserID">
            <summary>
            用户ID.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.EmployeeFile">
            <summary>
            人员选择列表文件.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.IsValidate">
            <summary>
            是否验证为空.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.ErrorMessage">
            <summary>
            验证错误信息.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.EmployeePicker.Controls">
            <summary>
            重写子控件属性.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.EmployeePicker.ValidateFormat">
            <summary>
            验证类型枚举
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.EmployeePicker.ValidateFormat.True">
            <summary>
            是.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.EmployeePicker.ValidateFormat.False">
            <summary>
            否.
            </summary>
        </member>
        <member name="T:Botwave.Message.IMessageSenderFactory">
            <summary>
            消息发送者工厂.
            </summary>
        </member>
        <member name="M:Botwave.Message.IMessageSenderFactory.GetMessageSenders(System.String)">
            <summary>
            获取消息发送者.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.FileManager.FileManagerSectionHandler">
            <summary>
            文件管理配置节点处理类.
            </summary>
        </member>
        <member name="F:Botwave.FileManager.FileManagerSectionHandler.FileServiceType">
            <summary>
            文档上传服务对象类型.
            </summary>
        </member>
        <member name="F:Botwave.FileManager.FileManagerSectionHandler.CurrentProperties">
            <summary>
            配置属性集合.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.FileManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置节点.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.FileManagerSectionHandler.Initialize">
            <summary>
            初始化配置节点对象.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.FileManagerSectionHandler.BindConfig(System.Xml.XmlNode)">
            <summary>
            绑定配置.
            </summary>
            <param name="section"></param>
        </member>
        <member name="T:Botwave.Events.AppEvent">
            <summary>
            应用程序的事件类.
            </summary>
        </member>
        <member name="M:Botwave.Events.AppEvent.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Events.AppEvent.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="appName">应用程序名称.</param>
        </member>
        <member name="M:Botwave.Events.AppEvent.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="appName">应用程序名称.</param>
            <param name="category">事件类别.</param>
        </member>
        <member name="M:Botwave.Events.AppEvent.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="appName">应用程序名称.</param>
            <param name="category">事件类别.</param>
            <param name="message">事件消息.</param>
        </member>
        <member name="M:Botwave.Events.AppEvent.ToString">
            <summary>
            重写转换为字符串的方法.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Botwave.Events.AppEvent.AppName">
            <summary>
            应用名称.
            </summary>
        </member>
        <member name="P:Botwave.Events.AppEvent.Category">
            <summary>
            事件类别.
            </summary>
        </member>
        <member name="P:Botwave.Events.AppEvent.Actor">
            <summary>
            执行者.
            </summary>
        </member>
        <member name="P:Botwave.Events.AppEvent.ActionTime">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Botwave.Events.AppEvent.Message">
            <summary>
            事件消息.
            </summary>
        </member>
        <member name="P:Botwave.Events.AppEvent.Data">
            <summary>
            附加参数/数据.
            </summary>
        </member>
        <member name="T:Botwave.Crypto.CryptoManager">
            <summary>
            加密解密管理类.
            </summary>
        </member>
        <member name="T:Botwave.Web.UserControlBase">
            <summary>
            用户控件基础类.
            </summary>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowError">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowError(System.String)">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
            <param name="message">错误信息.</param>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowError(System.String,System.String)">
            <summary>
            在错误页面显示指定错误信息.
            </summary>
            <param name="message">错误信息.</param>
            <param name="returnUrl">返回的 URL 地址.</param>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowSuccess">
            <summary>
            在成功页面显示默认成功信息.
            </summary>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowSuccess(System.String)">
            <summary>
            在成功页面显示指定成功消息.
            </summary>
            <param name="message">消息.</param>
        </member>
        <member name="M:Botwave.Web.UserControlBase.ShowSuccess(System.String,System.String)">
            <summary>
            在成功页面显示默认成功信息.
            </summary>
            <param name="message">消息.</param>
            <param name="returnUrl">返回的 URL 地址.</param>
        </member>
        <member name="P:Botwave.Web.UserControlBase.AppPath">
            <summary>
            应用程序路径.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.SiteMapPath">
            <summary>
            网站地图路径控件类.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateChildControls">
            <summary>
            重写创建子控件.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.DataBind">
            <summary>
            重写数据绑定.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.OnDataBinding(System.EventArgs)">
            <summary>
            重写数据绑定时处理.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateControlHierarchy">
            <summary>
            创建控件层次性架构.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.InitializeItem(System.Web.UI.WebControls.SiteMapNodeItem)">
            <summary>
            重写，为其添加 Target 属性.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateControlDefaultHierarchy">
            <summary>
            创建默认的路径分层架构控件.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateControlAutoSizeHierarchy">
            <summary>
            创建控件自动调整显示路径数分层架构.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.GetPagePathNodes">
            <summary>
            获取页面级的网站地图路径节点.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateItem(System.Int32,Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType,Botwave.Web.Controls.ExtendedSiteMap.PathNode)">
            <summary>
            创建网站地图路径节点控件.
            </summary>
            <param name="itemIndex"></param>
            <param name="itemType"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.InitializeItem(Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem)">
            <summary>
            初始化网站地图节点.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.InitializeExtend">
            <summary>
            初始化网站地图路径扩展.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.InitializeItemTemplates(System.Web.UI.WebControls.SiteMapNodeItemType,System.Web.UI.ITemplate@,System.Web.UI.WebControls.Style@)">
            <summary>
            初始化路径项模板以及样式.
            </summary>
            <param name="itemType"></param>
            <param name="template"></param>
            <param name="itemStyle"></param>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.InitializeItemTemplates(Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType,System.Web.UI.ITemplate@,System.Web.UI.WebControls.Style@)">
            <summary>
            初始化路径项模板以及样式.
            </summary>
            <param name="itemType"></param>
            <param name="template"></param>
            <param name="itemStyle"></param>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateItemLink(System.String,System.String,System.String,System.String,System.Web.UI.WebControls.Style)">
            <summary>
            创建路径项超链接控件.
            </summary>
            <param name="url"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="target"></param>
            <param name="linkStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateItemLiteral(System.String)">
            <summary>
            创建路径项文本控件.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Controls.SiteMapPath.CreateItemPathSeparator">
            <summary>
            创建路径分隔符控件.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Botwave.Web.Controls.SiteMapPath.DisplaySize">
            <summary>
            显示网站地图路径数目.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.SiteMapPath.Target">
            <summary>
            网站地图路径链接的链接目标.
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.StrUtils">
            <summary>
            字符串辅助类.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.StrUtils.RemoveMsgInString(System.String@,System.String,System.Char[])">
            <summary>
            以指定分隔符在指定字符串中移除指定信息字符串.
            </summary>
            <param name="oldString"></param>
            <param name="removeMsg"></param>
            <param name="splitChar"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.StrUtils.IsMsgInString(System.String,System.String,System.Char[])">
            <summary>
            以指定分隔符检查指定信息字符串是否包含在指定字符串中.
            </summary>
            <param name="oldString"></param>
            <param name="chekMsg"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.StrUtils.DistinctMsg(System.String,System.Char[])">
            <summary>
            以指定分隔符去除掉字符串中重复部分.
            </summary>
            <param name="msg"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.AprioriTxtDataOut">
            <summary>
            AprioriTxtDataOut 的摘要说明。
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.AprioriOut">
            <summary>
            AprioriOut 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriOut.SaveResult(System.Collections.IList)">
            <summary>
            保存记录结果.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriTxtDataOut.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="fileUrl"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriTxtDataOut.#ctor(System.IO.FileStream)">
            <summary>
            构造方法.
            </summary>
            <param name="fileStream"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriTxtDataOut.SaveResult(System.Collections.IList)">
            <summary>
            保存结果记录.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriTxtDataOut.Save(System.IO.FileStream,System.Collections.IList)">
            <summary>
            保存结果.
            </summary>
            <param name="stream"></param>
            <param name="record"></param>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriTxtDataOut.FileUrl">
            <summary>
            文件 URL.
            </summary>
        </member>
        <member name="T:Botwave.Commons.OleDbHelper">
            <summary>
            OleDb 数据辅助类.
            </summary>
        </member>
        <member name="F:Botwave.Commons.OleDbHelper.ACCESS_CONNECTIONSTRING_TEMPLATE">
            <summary>
            Microsoft Access 的数据库连接字符串格式.
            </summary>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            针对 System.Data.OleDb.OleDbCommand.Connection 执行 SQL 语句并返回受影响的行数.
            </summary>
            <param name="connString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            针对 System.Data.OleDb.OleDbCommand.Connection 执行 SQL 语句并返回受影响的行数.
            </summary>
            <param name="conn"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            针对 System.Data.OleDb.OleDbCommand.Connection 执行 SQL 语句并返回受影响的行数.
            </summary>
            <param name="trans"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            将 System.Data.OleDb.OleDbCommand.CommandText 发送到 System.Data.OleDb.OleDbCommand.Connection 并生成一个 System.Data.OleDb.OleDbDataReader.
            </summary>
            <param name="connString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            将 System.Data.OleDb.OleDbCommand.CommandText 发送到 System.Data.OleDb.OleDbCommand.Connection 并生成一个 System.Data.OleDb.OleDbDataReader.
            </summary>
            <param name="conn"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="connString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行.
            </summary>
            <param name="conn"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果数据集.
            </summary>
            <param name="connString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果数据集.
            </summary>
            <param name="conn"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.CacheParameters(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            缓存查询的 OleDb 参数对象.
            </summary>
            <param name="cacheKey"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.GetCachedParameters(System.String)">
            <summary>
            从缓存获取指定的参数对象数组.
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],Botwave.Commons.OleDbHelper.ConnectionActionType)">
            <summary>
            准备命令对象.
            </summary>
            <param name="cmd"></param>
            <param name="conn"></param>
            <param name="trans"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <param name="connActionType"></param>
        </member>
        <member name="T:Botwave.Commons.OleDbHelper.ConnectionActionType">
            <summary>
            连接操作类型枚举.
            </summary>
        </member>
        <member name="T:Botwave.Web.WebUtils">
            <summary>
            WebUtils 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Web.WebUtils.GetAppPath">
            <summary>
            获取相对于站点根目录的应用程序路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.GetAppStrPath">
            <summary>
            获取相对应用根目录的应用程序路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.HtmlEncode(System.String)">
            <summary>
            简单 HTML 编码.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.ResponseXML(System.String)">
            <summary>
            输出XML串
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Botwave.Web.WebUtils.SelectDropDownList(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            选择列表项
            </summary>
            <param name="ddl"></param>
            <param name="val"></param>
        </member>
        <member name="M:Botwave.Web.WebUtils.GetPagePath(System.String,System.String)">
            <summary>
            根据传入的url及appPath(/appPath/)获取相对于本应用的页面路径
            GetPagePath("http://localhost/app/Report/Default.aspx?", "/APP/") = Report/Default.aspx
            GetPagePath("http://localhost/Report/Default.aspx?", "/") = Report/Default.aspx
            </summary>
            <param name="url"></param>
            <param name="appPath"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.GetThemeName">
            <summary>
            从 Cookie 获取用户主题.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.SetThemeName(System.String)">
            <summary>
            设置用户主题 Cookie.
            </summary>
            <param name="themeName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.WebUtils.ClearThemeCookie">
            <summary>
            清除主题 Cookie 数据.
            </summary>
        </member>
        <member name="M:Botwave.Web.WebUtils.RegisterScriptReference(System.Web.UI.Page,System.String)">
            <summary>
            页面注册脚本引用.
            </summary>
            <param name="currentPage"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Botwave.Web.WebUtils.RegisterCSSReference(System.Web.UI.Page,System.String,System.String)">
            <summary>
            页面注册CSS文件引用.
            </summary>
            <param name="currentPage"></param>
            <param name="filePath"></param>
            <param name="title"></param>
        </member>
        <member name="M:Botwave.Web.WebUtils.RedirectParent(System.Web.HttpResponse,System.String)">
            <summary>
            将指定的相对页面定向到当前 HttpResponse 对象的父页面.
            </summary>
            <param name="response">当前响应的 Response 对象.</param>
            <param name="path">重定向的页面相对路径（如："default.aspx", "workbench.aspx", "workflow/default.aspx"）.</param>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem">
            <summary>
            路径节点项控件.
            </summary>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.#ctor(Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType)">
            <summary>
            构造方法.
            </summary>
            <param name="itemType"></param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.#ctor(System.Int32,Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType)">
            <summary>
            构造方法.
            </summary>
            <param name="itemIndex"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.OnDataBinding(System.EventArgs)">
            <summary>
            重写数据绑定时方法.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.ItemIndex">
            <summary>
            项索引.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.ItemType">
            <summary>
            节点项类型.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.PathNode">
            <summary>
            节点对象.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.DataItemIndex">
            <summary>
            数据项索引.
            </summary>
        </member>
        <member name="P:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItem.DisplayIndex">
            <summary>
            显示索引.
            </summary>
        </member>
        <member name="T:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType">
            <summary>
            网站路径节点类型.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType.Root">
            <summary>
            根节点.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType.Parent">
            <summary>
            父节点.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType.Current">
            <summary>
            当前节点.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType.PathSeparator">
            <summary>
            路径分割点.
            </summary>
        </member>
        <member name="F:Botwave.Web.Controls.ExtendedSiteMap.PathNodeItemType.Child">
            <summary>
            子节点.
            </summary>
        </member>
        <member name="T:Botwave.Message.EmailMessageSender">
            <summary>
            Email消息发送器.
            </summary>
        </member>
        <member name="P:Botwave.Message.EmailMessageSender.SmtpHost">
            <summary>
            Smtp主机.
            </summary>
        </member>
        <member name="P:Botwave.Message.EmailMessageSender.UserName">
            <summary>
            邮箱用户名.
            </summary>
        </member>
        <member name="P:Botwave.Message.EmailMessageSender.Password">
            <summary>
            邮箱用户密码.
            </summary>
        </member>
        <member name="T:Botwave.FileManager.Support.SharedDirectoryFileService">
            <summary>
            共享目录方式的文件服务实现类.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.Support.SharedDirectoryFileService.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.Support.SharedDirectoryFileService.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="saveDirectory">保存目录.</param>
        </member>
        <member name="M:Botwave.FileManager.Support.SharedDirectoryFileService.Upload(System.IO.Stream,System.String)">
            <summary>
            将上传输入流保存为指定文件.
            </summary>
            <param name="inputStream">要保存的输入流.</param>
            <param name="fileName">保存文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.SharedDirectoryFileService.Exist(System.String)">
            <summary>
            指定文件是否存在.
            </summary>
            <param name="fileName">要检查是否存在的文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.SharedDirectoryFileService.Delete(System.String)">
            <summary>
            删除指定文件.
            </summary>
            <param name="fileName">要删除的文件名.</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.FileManager.Support.FTPFileService">
            <summary>
            FTP 文件服务(未实现).
            </summary>
        </member>
        <member name="M:Botwave.FileManager.Support.FTPFileService.Upload(System.IO.Stream,System.String)">
            <summary>
            将上传输入流保存为指定文件.
            </summary>
            <param name="inputStream">要保存的输入流.</param>
            <param name="fileName">保存文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.FTPFileService.Exist(System.String)">
            <summary>
            指定文件是否存在.
            </summary>
            <param name="fileName">要检查是否存在的文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.FTPFileService.Delete(System.String)">
            <summary>
            删除指定文件.
            </summary>
            <param name="fileName">要删除的文件名.</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Crypto.RijndaelService">
            <summary>
            Rijndael 算法密码服务实现类.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.#ctor(System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.#ctor(System.String,System.String)">
            <summary>
            构造方法.
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.Encrypt(System.Byte[])">
            <summary>
            加密指定字节数组.
            </summary>
            <param name="plainBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.Encrypt(System.String)">
            <summary>
            加密指定字符串.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.Decrypt(System.Byte[])">
            <summary>
            解密指定字节数组.
            </summary>
            <param name="cryptoBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.Decrypt(System.String)">
            <summary>
            解密指定字符串.
            </summary>
            <param name="cryptoText"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.GetLegalKey(System.String)">
            <summary>
            获取密钥.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Crypto.RijndaelService.GetLegalIV(System.String)">
            <summary>
             获得初始向量 IV.
            </summary>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.ExceptionLogger">
            <summary>
            异常日志处理.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ExceptionLogger.Log(System.String)">
            <summary>
            执行异常处理逻辑.
            </summary>
            <param name="describe">对当前异常的描述</param>
            <returns>返回详细的出错提示内容</returns>
        </member>
        <member name="M:Botwave.Commons.ExceptionLogger.SaveException2DB(System.String,System.String,System.Exception)">
            <summary>
            保存到数据库.
            </summary>
        </member>
        <member name="M:Botwave.Commons.ExceptionLogger.GetExceptionType(System.Exception)">
            <summary>
            得到显示给用户的错误说明.
            </summary>
            <param name="ex">源异常</param>
            <returns>经过处理的错误说明</returns>
        </member>
        <member name="M:Botwave.Commons.ExceptionLogger.GetExceptionDataByPage(System.Int32,System.Int32,System.Int32@,System.String)">
            <summary>
            得到错误日志.
            </summary>
            <param name="pageCurrent">当前页码</param>
            <param name="pageSize">每页显示条数</param>
            <param name="recordCount">总数</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.ExceptionLogger.ExecSqlScriptForDataSet(System.String)">
            <summary>
            根据自定义的条件获取异常日志数据.
            </summary>
            <param name="where">自定义的查询条件（where后面接的内容）</param>
            <returns></returns>
        </member>
        <member name="P:Botwave.Commons.ExceptionLogger.ExceptionLogBody">
            <summary>
            异常的详细内容.
            </summary>
        </member>
        <member name="T:Botwave.Web.Themes.ThemeContext">
            <summary>
            主题上下文.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeContext.DefaultTheme">
            <summary>
            没惹的主题名称.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeContext.RepeatColumns">
            <summary>
            主题列表显示的重复列数.
            </summary>
        </member>
        <member name="F:Botwave.Web.Themes.ThemeContext.Themes">
            <summary>
            主题信息字典(key:主题名称).
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeContext.#cctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="T:Botwave.Web.PerformanceTracker.PerfLogger">
            <summary>
            性能日志记录器.
            </summary>
        </member>
        <member name="M:Botwave.Web.PerformanceTracker.PerfLogger.#cctor">
            <summary>
            静态构造方法.
            </summary>
        </member>
        <member name="M:Botwave.Web.PerformanceTracker.PerfLogger.Log(System.Web.HttpRequest,System.DateTime,System.DateTime)">
            <summary>
            记录日志.
            </summary>
            <param name="req"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.IApriori">
            <summary>
            Apriori 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.IApriori.Create">
            <summary>
            创建  Apriori 对象.
            </summary>
        </member>
        <member name="T:Botwave.FileManager.Support.WebDAVFileService">
            <summary>
            WebDAV 方式的文件服务实现类.
            </summary>
        </member>
        <member name="F:Botwave.FileManager.Support.WebDAVFileService.ErrorMessage">
            <summary>
            错误信息.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.Support.WebDAVFileService.#ctor">
            <summary>
            构造方法.
            </summary>
        </member>
        <member name="M:Botwave.FileManager.Support.WebDAVFileService.Upload(System.IO.Stream,System.String)">
            <summary>
            将上传输入流保存为指定文件.
            </summary>
            <param name="inputStream">要保存的输入流.</param>
            <param name="fileName">保存文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.WebDAVFileService.Exist(System.String)">
            <summary>
            指定文件是否存在.
            </summary>
            <param name="fileName">要检查是否存在的文件名.</param>
            <returns></returns>
        </member>
        <member name="M:Botwave.FileManager.Support.WebDAVFileService.Delete(System.String)">
            <summary>
            删除指定文件.
            </summary>
            <param name="fileName">要删除的文件名.</param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.MathUtils">
            <summary>
            数学辅助类.
            </summary>
        </member>
        <member name="M:Botwave.Commons.MathUtils.EqualsZero(System.Double)">
            <summary>
            与 0 比较.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Commons.DbUtils">
            <summary>
            数据库辅助类。
            </summary>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToBoolean(System.Object)">
            <summary>
            转换指定对象为布尔值.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToBoolean(System.Object,System.Boolean)">
            <summary>
            转换指定对象为布尔值.
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToString(System.Object)">
            <summary>
            转换指定对象为字符串.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToString(System.Object,System.String)">
            <summary>
            转换指定对象为字符串.
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToInt32(System.Object)">
            <summary>
            转换指定对象为整型.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToInt32(System.Object,System.Int32)">
            <summary>
            转换指定对象为整型.
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToSingle(System.Object)">
            <summary>
            转换指定对象为 single 类型.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToSingle(System.Object,System.Int32)">
            <summary>
            转换指定对象为 single 类型.
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToDouble(System.Object)">
            <summary>
            转换指定对象为 double 类型.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToDouble(System.Object,System.Int32)">
            <summary>
            转换指定对象为 double 类型.
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToDateTime(System.Object)">
            <summary>
            转换为时间类型.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.ToGuid(System.Object)">
            <summary>
            转化为 Guid 类型.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.FilterSQL(System.String)">
            <summary>
            过滤 SQL 语句.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.Copy(System.Data.DataTable,System.Data.DataTable,System.String[],System.String[],System.String[],System.Data.DataTable@)">
            <summary>
            复制指定数据表数据.
            </summary>
            <param name="dtSrc"></param>
            <param name="dtDest"></param>
            <param name="srcFields"></param>
            <param name="destFields"></param>
            <param name="regexs"></param>
            <param name="dtEx"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Commons.DbUtils.Copy(System.Data.DataTable,System.Data.DataTable,System.String[],System.String[])">
            <summary>
            复制指定数据表数据.
            </summary>
            <param name="dtSrc"></param>
            <param name="dtDest"></param>
            <param name="srcFields"></param>
            <param name="destFields"></param>
        </member>
        <member name="M:Botwave.Commons.DbUtils.Copy(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            复制指定数据表数据.
            </summary>
            <param name="dtSrc"></param>
            <param name="dtDest"></param>
        </member>
        <member name="M:Botwave.Commons.DbUtils.Copy(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copy行数据，要求表结构相同.
            </summary>
            <param name="drSrc"></param>
            <param name="drDest"></param>
        </member>
        <member name="P:Botwave.Commons.DbUtils.DangerSQLRegex">
            <summary>
            危险 SQL 字符正则表达式.
            </summary>
        </member>
        <member name="T:Botwave.Web.MasterPageBase">
            <summary>
            模板页基础类.
            </summary>
        </member>
        <member name="P:Botwave.Web.MasterPageBase.AppPath">
            <summary>
            应用程序路径.
            </summary>
        </member>
        <member name="P:Botwave.Message.DefaultMessageSenderFactory.Senders">
            <summary>
            适配spring
            srping中的dictionary的类型为HybridDictionary
            </summary>
        </member>
        <member name="T:Botwave.Log.Appender.BotwaveAppender">
            <summary>
            Botwave Appender
            </summary>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppender"/> class.
            </summary>
            <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:Botwave.Log.Appender.BotwaveAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:Botwave.Log.Appender.BotwaveAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:Botwave.Log.Appender.BotwaveAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.OnClose">
            <summary>
            Override the parent method to close the database
            </summary>
            <remarks>
            <para>
            Closes the database command and database connection.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Inserts the events into the database.
            </summary>
            <param name="events">The events to insert into the database.</param>
            <remarks>
            <para>
            Insert all the events specified in the <paramref name="events"/>
            array into the database.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)">
            <summary>
            Adds a parameter to the command.
            </summary>
            <param name="parameter">The parameter to add to the command.</param>
            <remarks>
            <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.GetOperationID(System.String)">
            <summary>
            Get the operation id by operation name
            </summary>
            <param name="operationName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.GetExceptionID(System.String)">
            <summary>
            Get the exception id by exception name
            </summary>
            <param name="exceptionName"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
            <summary>
            Writes the events to the database using the transaction specified.
            </summary>
            <param name="dbTran">The transaction that the events will be executed under.</param>
            <param name="events">The array of events to insert into the database.</param>
            <remarks>
            <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:Botwave.Log.Appender.BotwaveAppender.UseTransactions"/>
            property for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.GetLogStatement(log4net.Core.LoggingEvent)">
            <summary>
            Formats the log message into database statement text.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
            <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand"/>.
            </returns>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.InitializeDatabaseConnection">
            <summary>
            Connects to the database.
            </summary>		
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.ResolveConnectionType">
            <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
            <remarks>
            <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:Botwave.Log.Appender.BotwaveAppender.ConnectionType"/> property.
            </para>
            <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
            </remarks>
            <returns>The <see cref="T:System.Type"/> of the ADO.NET provider</returns>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.InitializeDatabaseCommand">
            <summary>
            Prepares the database command and initialize the parameters.
            </summary>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.AddOperation2Dictionary">
            <summary>
            AddOperation2Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Botwave.Log.Appender.BotwaveAppender.AddException2Dictionary">
            <summary>
            AddException2Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_usePreparedCommand">
            <summary>
            Flag to indicate if we are using a command object
            </summary>
            <remarks>
            <para>
            Set to <c>true</c> when the appender is to use a prepared
            statement or stored procedure to insert into the database.
            </para>
            </remarks>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_parameters">
            <summary>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> objects.
            </summary>
            <remarks>
            <para>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> objects.
            </para>
            </remarks>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_operationDictionary">
            <summary>
            The operationDictionary
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_exceptionDictionary">
            <summary>
            The exceptionDictionary
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_dbConnection">
            <summary>
            The <see cref="T:System.Data.IDbConnection"/> that will be used
            to insert logging events into a database.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_dbCommand">
            <summary>
            The database command.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_connectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_connectionType">
            <summary>
            String type name of the <see cref="T:System.Data.IDbConnection"/> type name.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_commandText">
            <summary>
            The text of the command.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_commandType">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_useTransactions">
            <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.m_reconnectOnError">
            <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
        </member>
        <member name="F:Botwave.Log.Appender.BotwaveAppender.operationLog">
            <summary>
            BotwaveOperationLog Class
            </summary>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.ConnectionString">
            <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
            <value>
            The database connection string used to connect to the database.
            </value>
            <remarks>
            <para>
            The connections string is specific to the connection type.
            See <see cref="P:Botwave.Log.Appender.BotwaveAppender.ConnectionType"/> for more information.
            </para>
            </remarks>
            <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code>
            </example>
            <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code>
            </example>
            <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code>
            </example>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.ConnectionType">
            <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection"/> connection
            that should be created.
            </summary>
            <value>
            The type name of the <see cref="T:System.Data.IDbConnection"/> connection.
            </value>
            <remarks>
            <para>
            The type name of the ADO.NET provider to use.
            </para>
            <para>
            The default is to use the OLE DB provider.
            </para>
            </remarks>
            <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
            <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.CommandText">
            <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
            <value>
            The command text used to insert logging events into the database.
            </value>
            <remarks>
            <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
            <para>
            The <see cref="P:Botwave.Log.Appender.BotwaveAppender.CommandType"/> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.CommandType">
            <summary>
            Gets or sets the command type to execute.
            </summary>
            <value>
            The command type to execute.
            </value>
            <remarks>
            <para>
            This value may be either <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:Botwave.Log.Appender.BotwaveAppender.CommandText"/> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure"/> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:Botwave.Log.Appender.BotwaveAppender.CommandText"/> property is the name of a stored procedure
            to execute.
            </para>
            <para>
            The default value is <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>).
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.UseTransactions">
            <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
            <value>
            <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
            <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:Botwave.Log.Appender.BotwaveAppender.SecurityContext"/> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:Botwave.Log.Appender.BotwaveAppender.SecurityContext"/> used to call the NetSend method.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:Botwave.Log.Appender.BotwaveAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.ReconnectOnError">
            <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
            <value>
            <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
            <remarks>
            <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
            <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
            <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.Connection">
            <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <value>
            The underlying <see cref="T:System.Data.IDbConnection"/>.
            </value>
            <remarks>
            <see cref="T:log4net.Appender.AdoNetAppender"/> creates a <see cref="T:System.Data.IDbConnection"/> to insert 
            logging events into a database.  Classes deriving from <see cref="T:log4net.Appender.AdoNetAppender"/> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection"/>.  Use the 
            underlying <see cref="T:System.Data.IDbConnection"/> returned from <see cref="P:Botwave.Log.Appender.BotwaveAppender.Connection"/> if 
            you require access beyond that which <see cref="T:log4net.Appender.AdoNetAppender"/> provides.
            </remarks>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.OperationDictionary">
            <summary>
            OperationDictionary
            </summary>
        </member>
        <member name="P:Botwave.Log.Appender.BotwaveAppender.ExceptionDictionary">
            <summary>
            ExceptionDictionary
            </summary>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.Apriori">
            <summary>
            Apriori 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.#ctor(Botwave.Algorithms.Apriori.AprioriIn,Botwave.Algorithms.Apriori.AprioriOut,System.Double,System.Double)">
            <summary>
            AprioriSet 算法对象.
            </summary>
            <param name="inObj"></param>
            <param name="outObj"></param>
            <param name="minSupport">支持度</param>
            <param name="minConfidence">可信度</param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.#ctor(Botwave.Algorithms.Apriori.AprioriIn,Botwave.Algorithms.Apriori.AprioriOut,System.Double,System.Double,System.Int32)">
            <summary>
            AprioriSet算法对象
            </summary>
            <param name="inObj"></param>
            <param name="outObj"></param>
            <param name="minSupport">支持度</param>
            <param name="minConfidence">可信度</param>
            <param name="maxLength">最大的项与项关联的个数</param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.#ctor(Botwave.Algorithms.Apriori.AprioriIn,Botwave.Algorithms.Apriori.AprioriOut,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            AprioriSet 算法对象.
            </summary>
            <param name="inObj"></param>
            <param name="outObj"></param>
            <param name="minSupport">支持度</param>
            <param name="minConfidence">可信度</param>
            <param name="minLength">最小的项与项关联的个数</param>
            <param name="maxLength">最大的项与项关联的个数</param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.Create">
            <summary>
            开始分析计算.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.GenerateFrequence">
            <summary>
            生成最大频繁集.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.GenerateFrequenceL1(System.Collections.IList,System.Collections.IList@,System.Collections.IList@)">
            <summary>
            生成频繁集L1，同时进行剪枝并返回新项集.
            </summary>
            <param name="allItemDS"></param>
            <param name="resultDS"></param>
            <param name="newItemSet"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.Apriori.RecursiveDump(System.Int32,System.Collections.IList@,System.Collections.IList)">
            <summary>
            循环递规调用，生成满足最小计数的最大频繁集.
            </summary>
            <param name="level"></param>
            <param name="dsResult"></param>
            <param name="pruneSet"></param>
        </member>
        <member name="T:Botwave.Entities.TrackedEntity">
            <summary>
            跟踪实体类.
            </summary>
        </member>
        <member name="P:Botwave.Entities.TrackedEntity.CreatedTime">
            <summary>
            创建时间.
            </summary>
        </member>
        <member name="P:Botwave.Entities.TrackedEntity.LastModTime">
            <summary>
            最后更新时间.
            </summary>
        </member>
        <member name="P:Botwave.Entities.TrackedEntity.Creator">
            <summary>
            创建人.
            </summary>
        </member>
        <member name="P:Botwave.Entities.TrackedEntity.LastModifier">
            <summary>
            最后更新人.
            </summary>
        </member>
        <member name="T:Botwave.Web.Themes.ThemeSectionHandler">
            <summary>
            Theme 主题配置节点类.
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建节点.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeSectionHandler.Init">
            <summary>
            初始化主题配置节点.
            </summary>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeSectionHandler.InitThemes(System.Xml.XmlNode)">
            <summary>
            初始化主题信息.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeSectionHandler.GetThemeInfo(System.Xml.XmlNode)">
            <summary>
            获取主题信息.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Web.Themes.ThemeSectionHandler.GetThemeHeader(System.Xml.XmlNode)">
            <summary>
            获取主题头部内容代码.
            </summary>
            <param name="themeNode"></param>
            <returns></returns>
        </member>
        <member name="T:Botwave.Web.PerformanceTracker.PerformanceTrackerHttpModule">
            <summary>
            性能跟踪 HttpModule 类.
            </summary>
        </member>
        <member name="M:Botwave.Web.PerformanceTracker.PerformanceTrackerHttpModule.Dispose">
            <summary>
            销毁.
            </summary>
        </member>
        <member name="M:Botwave.Web.PerformanceTracker.PerformanceTrackerHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            HttpModule 初始化.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Botwave.Web.PerformanceTracker.PerformanceTrackerHttpModule.LogRequest(System.Object,System.EventArgs)">
            <summary>
            记录请求.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.AprioriSqlDataOut">
            <summary>
            AprioriSqlDataOut 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataOut.#ctor(System.String,Botwave.Algorithms.Apriori.LibConst.OperateType)">
            <summary>
            构造方法.
            </summary>
            <param name="resultTableName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataOut.SaveResult(System.Collections.IList)">
            <summary>
            保存结果记录.
            </summary>
            <param name="record"></param>
        </member>
        <member name="T:Botwave.Algorithms.Apriori.AprioriSqlDataIn">
            <summary>
            AprioriSqlDataIn 的摘要说明。
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            数据源人口.
            </summary>
            <param name="dataTableName">交易日志表名</param>
            <param name="dataTableCodingFieldName">交易日志中表示交易号的字段名称</param>
            <param name="dataTableItemFieldName">交易日志中表示项集字段的名称</param>
            <param name="itemTableName">项集表名称</param>
            <param name="itemKeyFieldName">项集表中表示唯一标识的字段名称</param>
            <param name="itemTextFieldName">项集表中表示项具体名称的字段名称</param>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.GetAllItems">
            <summary>
            获取所有的项集合.
            </summary>
            <returns>GoodItemRecord对象集合 IList</returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.SetMaxRecordCount">
            <summary>
            获取数据源中的所有交易记录总数.
            </summary>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.GetTheItemBarginedCount(System.String)">
            <summary>
            在所有的交易记录中进行了某些物品交易的记录数.
            </summary>
            <param name="itemIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.GetTheItemBarginedCount(System.Int32)">
            <summary>
            在所有的交易记录中进行了某个物品交易的记录数.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.GetSupport(System.String,System.String)">
            <summary>
            获取支持度
            交易集中同时包含 XY 的交易数与所有交易数之比.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Botwave.Algorithms.Apriori.AprioriSqlDataIn.GetConfidence(System.String,System.String)">
            <summary>
            获取可信度.
            交易集中同时包含 XY 的交易数与包含 X 的交易数之比.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriSqlDataIn.DataTableName">
            <summary>
            交易日志表名.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriSqlDataIn.DataTableCodingFieldName">
            <summary>
            交易日志中表示交易号的字段名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriSqlDataIn.DataTableItemFieldName">
            <summary>
            交易日志中表示项集字段的名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriSqlDataIn.ItemTableName">
            <summary>
            项集表名称.
            </summary>
        </member>
        <member name="P:Botwave.Algorithms.Apriori.AprioriSqlDataIn.QueryResultDataCache">
            <summary>
            查询结果数据缓存对象.
            </summary>
        </member>
        <member name="T:Botwave.Configuration.ExceptionConfig">
            <summary>
            异常捕捉类的配置.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.Default">
            <summary>
            默认实例对象.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.CatchException">
            <summary>
            是否启用异常捕捉功能.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.ReceiveMail">
            <summary>
            接受异常报告的Email.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.DataException">
            <summary>
            发生DataException类型的异常时，提示给用户的消息.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.HttpException">
            <summary>
            发生HttpException类型的异常时，提示给用户的消息.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.HttpUnhandledException">
            <summary>
             发生HttpUnhandledException类型的异常时，提示给用户的消息.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.SqlException">
            <summary>
             发生SqlException类型的异常时，提示给用户的消息.
            </summary>
        </member>
        <member name="P:Botwave.Configuration.ExceptionConfig.OtherException">
            <summary>
             发生未被定义类型的异常时，提示给用户的消息.
            </summary>
        </member>
    </members>
</doc>
