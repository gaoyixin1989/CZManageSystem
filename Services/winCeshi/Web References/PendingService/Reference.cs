//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace winCeshi.PendingService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PendingServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PendingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback QueryTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTaskToDoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTaskToReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitTaskToDoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitTaskToDoExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitTaskToReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitTaskToReadExOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskToDoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskToDoExOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskToReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskToReadExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PendingService() {
            this.Url = global::winCeshi.Properties.Settings.Default.winCeshi_PendingService_PendingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event QueryTaskCompletedEventHandler QueryTaskCompleted;
        
        /// <remarks/>
        public event AddTaskToDoCompletedEventHandler AddTaskToDoCompleted;
        
        /// <remarks/>
        public event AddTaskToReadCompletedEventHandler AddTaskToReadCompleted;
        
        /// <remarks/>
        public event CommitTaskToDoCompletedEventHandler CommitTaskToDoCompleted;
        
        /// <remarks/>
        public event CommitTaskToDoExCompletedEventHandler CommitTaskToDoExCompleted;
        
        /// <remarks/>
        public event CommitTaskToReadCompletedEventHandler CommitTaskToReadCompleted;
        
        /// <remarks/>
        public event CommitTaskToReadExCompletedEventHandler CommitTaskToReadExCompleted;
        
        /// <remarks/>
        public event DeleteTaskToDoCompletedEventHandler DeleteTaskToDoCompleted;
        
        /// <remarks/>
        public event DeleteTaskToDoExCompletedEventHandler DeleteTaskToDoExCompleted;
        
        /// <remarks/>
        public event DeleteTaskToReadCompletedEventHandler DeleteTaskToReadCompleted;
        
        /// <remarks/>
        public event DeleteTaskToReadExCompletedEventHandler DeleteTaskToReadExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryTask(string employeeID, string systemID, int taskType, System.DateTime fromDate, System.DateTime endDate) {
            object[] results = this.Invoke("QueryTask", new object[] {
                        employeeID,
                        systemID,
                        taskType,
                        fromDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTaskAsync(string employeeID, string systemID, int taskType, System.DateTime fromDate, System.DateTime endDate) {
            this.QueryTaskAsync(employeeID, systemID, taskType, fromDate, endDate, null);
        }
        
        /// <remarks/>
        public void QueryTaskAsync(string employeeID, string systemID, int taskType, System.DateTime fromDate, System.DateTime endDate, object userState) {
            if ((this.QueryTaskOperationCompleted == null)) {
                this.QueryTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTaskOperationCompleted);
            }
            this.InvokeAsync("QueryTask", new object[] {
                        employeeID,
                        systemID,
                        taskType,
                        fromDate,
                        endDate}, this.QueryTaskOperationCompleted, userState);
        }
        
        private void OnQueryTaskOperationCompleted(object arg) {
            if ((this.QueryTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTaskCompleted(this, new QueryTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTaskToDo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddTaskToDo(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string url, out string toDoID, out string msgError) {
            object[] results = this.Invoke("AddTaskToDo", new object[] {
                        systemID,
                        relationID,
                        employeeID,
                        toEmployeeID,
                        title,
                        url});
            toDoID = ((string)(results[1]));
            msgError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddTaskToDoAsync(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string url) {
            this.AddTaskToDoAsync(systemID, relationID, employeeID, toEmployeeID, title, url, null);
        }
        
        /// <remarks/>
        public void AddTaskToDoAsync(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string url, object userState) {
            if ((this.AddTaskToDoOperationCompleted == null)) {
                this.AddTaskToDoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTaskToDoOperationCompleted);
            }
            this.InvokeAsync("AddTaskToDo", new object[] {
                        systemID,
                        relationID,
                        employeeID,
                        toEmployeeID,
                        title,
                        url}, this.AddTaskToDoOperationCompleted, userState);
        }
        
        private void OnAddTaskToDoOperationCompleted(object arg) {
            if ((this.AddTaskToDoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTaskToDoCompleted(this, new AddTaskToDoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTaskToRead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddTaskToRead(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string content, out string toReadID, out string msgError) {
            object[] results = this.Invoke("AddTaskToRead", new object[] {
                        systemID,
                        relationID,
                        employeeID,
                        toEmployeeID,
                        title,
                        content});
            toReadID = ((string)(results[1]));
            msgError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddTaskToReadAsync(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string content) {
            this.AddTaskToReadAsync(systemID, relationID, employeeID, toEmployeeID, title, content, null);
        }
        
        /// <remarks/>
        public void AddTaskToReadAsync(string systemID, string relationID, string employeeID, string toEmployeeID, string title, string content, object userState) {
            if ((this.AddTaskToReadOperationCompleted == null)) {
                this.AddTaskToReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTaskToReadOperationCompleted);
            }
            this.InvokeAsync("AddTaskToRead", new object[] {
                        systemID,
                        relationID,
                        employeeID,
                        toEmployeeID,
                        title,
                        content}, this.AddTaskToReadOperationCompleted, userState);
        }
        
        private void OnAddTaskToReadOperationCompleted(object arg) {
            if ((this.AddTaskToReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTaskToReadCompleted(this, new AddTaskToReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitTaskToDo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitTaskToDo(string toDoID, string employeeID, out string msgError) {
            object[] results = this.Invoke("CommitTaskToDo", new object[] {
                        toDoID,
                        employeeID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitTaskToDoAsync(string toDoID, string employeeID) {
            this.CommitTaskToDoAsync(toDoID, employeeID, null);
        }
        
        /// <remarks/>
        public void CommitTaskToDoAsync(string toDoID, string employeeID, object userState) {
            if ((this.CommitTaskToDoOperationCompleted == null)) {
                this.CommitTaskToDoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitTaskToDoOperationCompleted);
            }
            this.InvokeAsync("CommitTaskToDo", new object[] {
                        toDoID,
                        employeeID}, this.CommitTaskToDoOperationCompleted, userState);
        }
        
        private void OnCommitTaskToDoOperationCompleted(object arg) {
            if ((this.CommitTaskToDoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitTaskToDoCompleted(this, new CommitTaskToDoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitTaskToDoEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitTaskToDoEx(string systemID, string relationID, string employeeID, out string msgError) {
            object[] results = this.Invoke("CommitTaskToDoEx", new object[] {
                        systemID,
                        relationID,
                        employeeID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitTaskToDoExAsync(string systemID, string relationID, string employeeID) {
            this.CommitTaskToDoExAsync(systemID, relationID, employeeID, null);
        }
        
        /// <remarks/>
        public void CommitTaskToDoExAsync(string systemID, string relationID, string employeeID, object userState) {
            if ((this.CommitTaskToDoExOperationCompleted == null)) {
                this.CommitTaskToDoExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitTaskToDoExOperationCompleted);
            }
            this.InvokeAsync("CommitTaskToDoEx", new object[] {
                        systemID,
                        relationID,
                        employeeID}, this.CommitTaskToDoExOperationCompleted, userState);
        }
        
        private void OnCommitTaskToDoExOperationCompleted(object arg) {
            if ((this.CommitTaskToDoExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitTaskToDoExCompleted(this, new CommitTaskToDoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitTaskToRead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitTaskToRead(string toReadID, string employeeID, out string msgError) {
            object[] results = this.Invoke("CommitTaskToRead", new object[] {
                        toReadID,
                        employeeID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitTaskToReadAsync(string toReadID, string employeeID) {
            this.CommitTaskToReadAsync(toReadID, employeeID, null);
        }
        
        /// <remarks/>
        public void CommitTaskToReadAsync(string toReadID, string employeeID, object userState) {
            if ((this.CommitTaskToReadOperationCompleted == null)) {
                this.CommitTaskToReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitTaskToReadOperationCompleted);
            }
            this.InvokeAsync("CommitTaskToRead", new object[] {
                        toReadID,
                        employeeID}, this.CommitTaskToReadOperationCompleted, userState);
        }
        
        private void OnCommitTaskToReadOperationCompleted(object arg) {
            if ((this.CommitTaskToReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitTaskToReadCompleted(this, new CommitTaskToReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommitTaskToReadEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitTaskToReadEx(string systemID, string relationID, string employeeID, out string msgError) {
            object[] results = this.Invoke("CommitTaskToReadEx", new object[] {
                        systemID,
                        relationID,
                        employeeID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitTaskToReadExAsync(string systemID, string relationID, string employeeID) {
            this.CommitTaskToReadExAsync(systemID, relationID, employeeID, null);
        }
        
        /// <remarks/>
        public void CommitTaskToReadExAsync(string systemID, string relationID, string employeeID, object userState) {
            if ((this.CommitTaskToReadExOperationCompleted == null)) {
                this.CommitTaskToReadExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitTaskToReadExOperationCompleted);
            }
            this.InvokeAsync("CommitTaskToReadEx", new object[] {
                        systemID,
                        relationID,
                        employeeID}, this.CommitTaskToReadExOperationCompleted, userState);
        }
        
        private void OnCommitTaskToReadExOperationCompleted(object arg) {
            if ((this.CommitTaskToReadExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitTaskToReadExCompleted(this, new CommitTaskToReadExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTaskToDo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTaskToDo(string toDoID, out string msgError) {
            object[] results = this.Invoke("DeleteTaskToDo", new object[] {
                        toDoID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskToDoAsync(string toDoID) {
            this.DeleteTaskToDoAsync(toDoID, null);
        }
        
        /// <remarks/>
        public void DeleteTaskToDoAsync(string toDoID, object userState) {
            if ((this.DeleteTaskToDoOperationCompleted == null)) {
                this.DeleteTaskToDoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskToDoOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskToDo", new object[] {
                        toDoID}, this.DeleteTaskToDoOperationCompleted, userState);
        }
        
        private void OnDeleteTaskToDoOperationCompleted(object arg) {
            if ((this.DeleteTaskToDoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskToDoCompleted(this, new DeleteTaskToDoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTaskToDoEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTaskToDoEx(string systemID, string relationID, out string msgError) {
            object[] results = this.Invoke("DeleteTaskToDoEx", new object[] {
                        systemID,
                        relationID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskToDoExAsync(string systemID, string relationID) {
            this.DeleteTaskToDoExAsync(systemID, relationID, null);
        }
        
        /// <remarks/>
        public void DeleteTaskToDoExAsync(string systemID, string relationID, object userState) {
            if ((this.DeleteTaskToDoExOperationCompleted == null)) {
                this.DeleteTaskToDoExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskToDoExOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskToDoEx", new object[] {
                        systemID,
                        relationID}, this.DeleteTaskToDoExOperationCompleted, userState);
        }
        
        private void OnDeleteTaskToDoExOperationCompleted(object arg) {
            if ((this.DeleteTaskToDoExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskToDoExCompleted(this, new DeleteTaskToDoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTaskToRead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTaskToRead(string toReadID, out string msgError) {
            object[] results = this.Invoke("DeleteTaskToRead", new object[] {
                        toReadID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskToReadAsync(string toReadID) {
            this.DeleteTaskToReadAsync(toReadID, null);
        }
        
        /// <remarks/>
        public void DeleteTaskToReadAsync(string toReadID, object userState) {
            if ((this.DeleteTaskToReadOperationCompleted == null)) {
                this.DeleteTaskToReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskToReadOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskToRead", new object[] {
                        toReadID}, this.DeleteTaskToReadOperationCompleted, userState);
        }
        
        private void OnDeleteTaskToReadOperationCompleted(object arg) {
            if ((this.DeleteTaskToReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskToReadCompleted(this, new DeleteTaskToReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTaskToReadEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTaskToReadEx(string systemID, string relationID, out string msgError) {
            object[] results = this.Invoke("DeleteTaskToReadEx", new object[] {
                        systemID,
                        relationID});
            msgError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskToReadExAsync(string systemID, string relationID) {
            this.DeleteTaskToReadExAsync(systemID, relationID, null);
        }
        
        /// <remarks/>
        public void DeleteTaskToReadExAsync(string systemID, string relationID, object userState) {
            if ((this.DeleteTaskToReadExOperationCompleted == null)) {
                this.DeleteTaskToReadExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskToReadExOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskToReadEx", new object[] {
                        systemID,
                        relationID}, this.DeleteTaskToReadExOperationCompleted, userState);
        }
        
        private void OnDeleteTaskToReadExOperationCompleted(object arg) {
            if ((this.DeleteTaskToReadExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskToReadExCompleted(this, new DeleteTaskToReadExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryTaskCompletedEventHandler(object sender, QueryTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddTaskToDoCompletedEventHandler(object sender, AddTaskToDoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTaskToDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTaskToDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string toDoID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddTaskToReadCompletedEventHandler(object sender, AddTaskToReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTaskToReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTaskToReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string toReadID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CommitTaskToDoCompletedEventHandler(object sender, CommitTaskToDoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitTaskToDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitTaskToDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CommitTaskToDoExCompletedEventHandler(object sender, CommitTaskToDoExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitTaskToDoExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitTaskToDoExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CommitTaskToReadCompletedEventHandler(object sender, CommitTaskToReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitTaskToReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitTaskToReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CommitTaskToReadExCompletedEventHandler(object sender, CommitTaskToReadExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitTaskToReadExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitTaskToReadExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskToDoCompletedEventHandler(object sender, DeleteTaskToDoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskToDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskToDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskToDoExCompletedEventHandler(object sender, DeleteTaskToDoExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskToDoExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskToDoExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskToReadCompletedEventHandler(object sender, DeleteTaskToReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskToReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskToReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskToReadExCompletedEventHandler(object sender, DeleteTaskToReadExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskToReadExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskToReadExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msgError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591