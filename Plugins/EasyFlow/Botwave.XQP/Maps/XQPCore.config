<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="XQPCoreSpace" xmlns="http://ibatis.apache.org/mapping"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <alias>
    <typeAlias alias="WorkflowProfile" type="Botwave.XQP.Domain.WorkflowProfile, Botwave.XQP" />
    <typeAlias alias="WorkflowRemark" type="Botwave.XQP.Domain.WorkflowRemark, Botwave.XQP" />
    <typeAlias alias="WorkflowNotify" type="Botwave.XQP.Domain.WorkflowNotify, Botwave.XQP" />
    <typeAlias alias="WorkflowNotifyActor" type="Botwave.XQP.Domain.WorkflowNotifyActor, Botwave.XQP" />
    <typeAlias alias="FormField" type="Botwave.XQP.Domain.FormField, Botwave.XQP" />
    <typeAlias alias="ToReview" type="Botwave.XQP.Domain.ToReview, Botwave.XQP" />
    <typeAlias alias="CZActivityInstance" type="Botwave.XQP.Domain.CZActivityInstance, Botwave.XQP" />
    <typeAlias alias="SMSProfile" type="Botwave.XQP.Domain.SMSProfile, Botwave.XQP" />
    <typeAlias alias="ActivityProfile" type="Botwave.XQP.Domain.ActivityProfile, Botwave.XQP" />
    <typeAlias alias="CZActivityDefinition" type="Botwave.XQP.Domain.CZActivityDefinition, Botwave.XQP" />
    <typeAlias alias="CZWorkflowInstance" type="Botwave.XQP.Domain.CZWorkflowInstance, Botwave.XQP" />
    <typeAlias alias="ActivityRemark" type="Botwave.XQP.Domain.ActivityRemark, Botwave.XQP" />
    <typeAlias alias="CZRegistSystem" type="Botwave.XQP.Domain.CZRegistSystem, Botwave.XQP" />
    <typeAlias alias="CZWorkflowDefinition" type="Botwave.XQP.Domain.CZWorkflowDefinition, Botwave.XQP" />
  </alias>

  <resultMaps>

    <resultMap class="WorkflowRemark" id="WorkflowRemarkResult">
      <result column="Id" property="Id" />
      <result column="UserId" property="UserId" />
      <result column="RemarkText" property="RemarkText" />
      <result column="RemarkValue" property="RemarkValue" />
      <result column="CreatedTime" property="CreatedTime" />
      <result column="DisplayOrder" property="DisplayOrder" />
    </resultMap>

    <resultMap class="WorkflowNotifyActor" id="WorkflowNotifyActorResult">
      <result column="ActivityInstanceId" property="ActivityInstanceId" />
      <result column="ActivityName" property="ActivityName" />
      <result column="UserName" property="UserName" />
      <result column="RealName" property="RealName" />
      <result column="Email" property="Email" />
      <result column="Mobile" property="Mobile" />
      <result column="EmployeeId" property="EmployeeId" />

      <result column="OperateType" property="OperateType" />
      <result column="NotifyType" property="NotifyType" />
      <result column="Title" property="WorkItemTitle" />
    </resultMap>

    <resultMap class="WorkflowNotify" id="WorkflowNotifyResult">
      <result column="UserId" property="UserId" />
      <result column="WorkflowName" property="WorkflowName" />
      <result column="NotifyType" property="NotifyType" />
    </resultMap>

  </resultMaps>

  <statements>
    <!-- Workflow Setting (begin)-->
    <insert id="xqp_WorkflowSetting_Insert" parameterClass="WorkflowProfile">
      INSERT INTO xqp_workflowSettings
      (WorkflowName, BasicFields, MinNotifyTaskCount, SmsNotifyFormat, EmailNotifyFormat, StatSmsNodifyFormat, StatEmailNodifyFormat,
      MaxCreationUndone,CreationControlType,MaxCreationInMonth,MaxCreationInWeek, SMSAuditNotifyFormat, IsSMSAudit, IsReview, IsClassicReviewType, ReviewActorCount, WorkflowInstanceTitle, IsAutoContinue,PrintAndExp,PrintAmount,Depts,Manager,IsMobile,IsTimeOutContinue,IsToShortDateString)
      VALUES
      (#WorkflowName#, #BasicFields#, #MinNotifyTaskCount#, #SmsNotifyFormat#, #EmailNotifyFormat#, #StatSmsNodifyFormat#, #StatEmailNodifyFormat#,
      #MaxCreationUndone#,#CreationControlType#,#MaxCreationInMonth#,#MaxCreationInWeek#, #SMSAuditNotifyFormat#, #IsSMSAudit#, #IsReview#, #IsClassicReviewType#, #ReviewActorCount#, #WorkflowInstanceTitle#, #IsAutoContinue#,#PrintAndExp#,#PrintAmount#,#Depts#,#Manager#,#IsMobile#,#IsTimeOutContinue#,#IsToShortDateString#)
    </insert>
    <update id="xqp_WorkflowSetting_Update" parameterClass="WorkflowProfile">
      UPDATE xqp_workflowSettings
      SET BasicFields=#BasicFields#, MinNotifyTaskCount=#MinNotifyTaskCount#,
      SmsNotifyFormat = #SmsNotifyFormat#, EmailNotifyFormat = #EmailNotifyFormat#,
      StatSmsNodifyFormat = #StatSmsNodifyFormat#, StatEmailNodifyFormat = #StatEmailNodifyFormat#,MaxCreationUndone=#MaxCreationUndone#,
      CreationControlType = #CreationControlType#, MaxCreationInMonth = #MaxCreationInMonth#, MaxCreationInWeek= #MaxCreationInWeek#,
      WorkflowInstanceTitle=#WorkflowInstanceTitle#,PrintAndExp=#PrintAndExp#,PrintAmount=#PrintAmount#,Depts=#Depts#,Manager=#Manager#,
      IsMobile=#IsMobile#,IsTimeOutContinue=#IsTimeOutContinue#,IsToShortDateString=#IsToShortDateString#
      WHERE WorkflowName = #WorkflowName#
    </update>
    <update id="xqp_WorkflowSetting_Update_SMSAudit" parameterClass="WorkflowProfile">
      UPDATE xqp_workflowSettings
      SET IsSMSAudit=#IsSMSAudit#, SMSAuditNotifyFormat = #SMSAuditNotifyFormat#, SMSAuditActivities = #SMSAuditActivities#
      WHERE WorkflowName = #WorkflowName#
    </update>
    <update id="xqp_WorkflowSetting_Update_AutoContinue" parameterClass="WorkflowProfile">
      UPDATE xqp_workflowSettings
      SET IsAutoContinue=#IsAutoContinue#, AutoContinueActivities=#AutoContinueActivities#
      WHERE WorkflowName = #WorkflowName#
    </update>
    <update id="xqp_WorkflowSetting_Update_Review" parameterClass="WorkflowProfile">
      UPDATE xqp_workflowSettings
      SET IsReview=#IsReview#, IsClassicReviewType = #IsClassicReviewType#, ReviewActorCount=#ReviewActorCount#, ReviewNotifyMessage = #ReviewNotifyMessage#
      WHERE WorkflowName = #WorkflowName#
    </update>

    <update id="xqp_WorkflowSetting_Update_PrintAndExp" parameterClass="WorkflowProfile">
      UPDATE xqp_workflowSettings
      SET PrintAndExp = #PrintAndExp#
      WHERE WorkflowName = #WorkflowName#
    </update>

    <select id="xqp_WorkflowSetting_Select_Exists" parameterClass="string" resultClass="int">
      SELECT COUNT(0) FROM xqp_workflowSettings
      WHERE WorkflowName = #value#
    </select>
    <select id="xqp_WorkflowSetting_Select_ByWorkflowInstanceId" parameterClass="guid" resultClass="WorkflowProfile">
      <![CDATA[
      SELECT WorkflowName,MinNotifyTaskCount,SmsNotifyFormat,EmailNotifyFormat, StatSmsNodifyFormat,StatEmailNodifyFormat,
          MaxCreationUndone,CreationControlType,MaxCreationInMonth,MaxCreationInWeek, SMSAuditNotifyFormat, IsSMSAudit, SMSAuditActivities,
          IsReview, IsClassicReviewType, ReviewNotifyMessage, ReviewActorCount, WorkflowInstanceTitle, IsAutoContinue, AutoContinueActivities,
          PrintAndExp,isnull(PrintAmount, -1) PrintAmount,
            StepWarningNotifyformat,StepTimeoutNotifyformat,WorkOrderWarningNotifyformat,WorkOrderTimeoutNotifyformat,Depts,Manager,isnull(IsMobile,1) as IsMobile
            ,isnull(IsTimeOutContinue,0) as IsTimeOutContinue,isnull(IsToShortDateString,0) IsToShortDateString
      FROM xqp_workflowSettings 
      WHERE WorkflowName = (
	        SELECT WorkflowName FROM bwwf_Workflows WHERE workflowId = (
		          SELECT WorkflowId FROM bwwf_Tracking_Workflows 
              WHERE workflowInstanceId = #value#
	        )
      )
      ]]>
    </select>

    <select id="xqp_WorkflowSetting_Select_ByActivityInstanceId" parameterClass="guid" resultClass="WorkflowProfile">
      <![CDATA[
      SELECT WorkflowName,MinNotifyTaskCount,SmsNotifyFormat,EmailNotifyFormat, StatSmsNodifyFormat,StatEmailNodifyFormat,
               MaxCreationUndone,CreationControlType,MaxCreationInMonth,MaxCreationInWeek, SMSAuditNotifyFormat, IsSMSAudit, SMSAuditActivities,
               IsReview, IsClassicReviewType, ReviewNotifyMessage, ReviewActorCount, WorkflowInstanceTitle, IsAutoContinue, AutoContinueActivities,
               PrintAndExp,isnull(PrintAmount, -1) PrintAmount,
            StepWarningNotifyformat,StepTimeoutNotifyformat,WorkOrderWarningNotifyformat,WorkOrderTimeoutNotifyformat,Depts,Manager,isnull(IsMobile,1) as IsMobile
            ,isnull(IsTimeOutContinue,0) as IsTimeOutContinue,isnull(IsToShortDateString,0) IsToShortDateString
      FROM xqp_workflowSettings 
      WHERE WorkflowName = (
	        SELECT WorkflowName FROM bwwf_Workflows WHERE workflowId = (
		          SELECT WorkflowId FROM bwwf_Tracking_Workflows WHERE workflowInstanceId = (
			            SELECT workflowInstanceId FROM vw_bwwf_Tracking_Activities_All
			            WHERE activityInstanceId = #value#
		          )
	        )
      )
      ]]>
    </select>

    <select id="xqp_WorkflowSetting_Select_ByWorkflowId" parameterClass="guid" resultClass="WorkflowProfile">
      <![CDATA[
      SELECT WorkflowName,BasicFields,MinNotifyTaskCount,SmsNotifyFormat,EmailNotifyFormat, StatSmsNodifyFormat,StatEmailNodifyFormat,
            MaxCreationUndone,CreationControlType,MaxCreationInMonth,MaxCreationInWeek, SMSAuditNotifyFormat, IsSMSAudit, SMSAuditActivities,
            IsReview, IsClassicReviewType, ReviewNotifyMessage, ReviewActorCount, WorkflowInstanceTitle, IsAutoContinue, AutoContinueActivities,
            PrintAndExp,isnull(PrintAmount, -1) PrintAmount,
            StepWarningNotifyformat,StepTimeoutNotifyformat,WorkOrderWarningNotifyformat,WorkOrderTimeoutNotifyformat,Depts,Manager,isnull(IsMobile,1) as IsMobile
            ,isnull(IsTimeOutContinue,0) as IsTimeOutContinue,isnull(IsToShortDateString,0) IsToShortDateString
     FROM xqp_workflowSettings 
      WHERE WorkflowName = (
	          SELECT WorkflowName FROM bwwf_Workflows WHERE workflowId = #value#
      )
      ]]>
    </select>
    <select id="xqp_WorkflowSetting_Select_ByWorkflowName" parameterClass="string" resultClass="WorkflowProfile">
      <![CDATA[
      SELECT WorkflowName,BasicFields,MinNotifyTaskCount,SmsNotifyFormat,EmailNotifyFormat, StatSmsNodifyFormat,StatEmailNodifyFormat,
            MaxCreationUndone,CreationControlType,MaxCreationInMonth,MaxCreationInWeek, SMSAuditNotifyFormat, IsSMSAudit, SMSAuditActivities,
            IsReview, IsClassicReviewType, ReviewNotifyMessage, ReviewActorCount, WorkflowInstanceTitle, IsAutoContinue, AutoContinueActivities,
            PrintAndExp,isnull(PrintAmount, -1) PrintAmount,
            StepWarningNotifyformat,StepTimeoutNotifyformat,WorkOrderWarningNotifyformat,WorkOrderTimeoutNotifyformat,Depts,Manager,isnull(IsMobile,1) as IsMobile
            ,isnull(IsTimeOutContinue,0) as IsTimeOutContinue,isnull(IsToShortDateString,0) IsToShortDateString
      FROM xqp_workflowSettings 
      WHERE WorkflowName = #value#
      ]]>
    </select>

    <select id="bwwf_WorkflowInstance_Select_Count_ByWorkflowId" resultClass="guid" parameterClass="int">
      <![CDATA[
        SELECT COUNT(*) FROM bwwf_Tracking_Workflows
        WHERE (WorkflowId IN(
              SELECT WorkflowId FROM bwwf_Workflows WHERE WorkflowName = (
                  SELECT WorkflowName FROM bwwf_Workflows WHERE WorkflowId = #value#)
               ))
      ]]>
    </select>

    <!-- Workflow Setting (end)-->

    <!-- Workflow Remarks (begin)-->
    <insert id="xqp_WorkflowRemark_Insert" parameterClass="WorkflowRemark">
      INSERT INTO xqp_WorkflowRemarks
      (UserId, DisplayOrder, RemarkText, RemarkValue, CreatedTime)
      VALUES
      (#UserId#, #DisplayOrder#, #RemarkText#, #RemarkValue#, getdate())
    </insert>

    <update id="xqp_WorkflowRemark_Update_ById" parameterClass="Hashtable">
      UPDATE xqp_WorkflowRemarks
      SET RemarkText = #RemarkText#, RemarkValue = #RemarkValue#
      WHERE Id = #Id#
    </update>

    <delete id="xqp_WorkflowRemark_Delete" parameterClass="int">
      DELETE FROM xqp_WorkflowRemarks WHERE [Id] = #value#
    </delete>

    <select id="xqp_WorkflowRemark_Select" parameterClass="guid" resultMap="WorkflowRemarkResult" >
      SELECT Id, UserId, DisplayOrder, RemarkText, RemarkValue, CreatedTime
      FROM xqp_WorkflowRemarks
      <dynamic prepend="where">
        <isParameterPresent>UserId = #value#</isParameterPresent>
      </dynamic>
    </select>

    <select id="xqp_WorkflowRemark_Select_IsExists" parameterClass="WorkflowRemark" resultClass="int">
      SELECT [Id] FROM xqp_WorkflowRemarks
      WHERE UserId = #UserId#
      AND RemarkText = #RemarkText#
    </select>
    <!-- Workflow Remarks (end)-->

    <!-- Activity Remarks (begin)-->
    <insert id="cz_ActivityRemark_Insert" parameterClass="ActivityRemark">
      INSERT INTO cz_ActivityRemarks
      (WorkflowName, ActivityName, DisplayOrder, RemarkText, RemarkValue, CreatedTime)
      VALUES
      (#WorkflowName#, #ActivityName#, #DisplayOrder#, #RemarkText#, #RemarkValue#, getdate())
    </insert>

    <update id="cz_ActivityRemark_Update_ById" parameterClass="Hashtable">
      UPDATE cz_ActivityRemarks
      SET RemarkText = #RemarkText#, RemarkValue = #RemarkValue#
      WHERE Id = #Id#
    </update>

    <delete id="cz_ActivityRemark_Delete" parameterClass="int">
      DELETE FROM cz_ActivityRemarks WHERE [Id] = #value#
    </delete>

    <select id="cz_ActivityRemark_Select" parameterClass="guid" resultClass="ActivityRemark" >
      SELECT Id, ca.WorkflowName, ca.ActivityName, DisplayOrder, RemarkText, RemarkValue, ca.CreatedTime
      FROM cz_ActivityRemarks ca
      inner join bwwf_activities a
      on ca.activityname = a.activityname
      inner join bwwf_workflows w
      on a.workflowid=w.workflowid and w.workflowname=ca.workflowname
      <dynamic prepend="where">
        <isParameterPresent>a.activityid = #value#</isParameterPresent>
      </dynamic>
    </select>

    <select id="cz_ActivityRemark_Select_IsExists" parameterClass="ActivityRemark" resultClass="int">
      SELECT [Id] FROM cz_ActivityRemarks
      WHERE ActivityName = #ActivityName#
      AND RemarkText = #RemarkText# AND WorkflowName = #WorkflowName#
    </select>
    <!-- Activity Remarks (end)-->

    <!-- Workflow Notify Setting (begin)-->
    <insert id="xqp_WorkflowNotify_Insert" parameterClass="WorkflowNotify">
      INSERT INTO xqp_WorkflowNotify
      (UserId, WorkflowName, NotifyType,ReviewType)
      VALUES
      (#UserId#, #WorkflowName#, #NotifyType#,#ReviewType#)
    </insert>

    <update id="xqp_WorkflowNotify_Update" parameterClass="WorkflowNotify">
      UPDATE xqp_WorkflowNotify
      SET NotifyType = #NotifyType#,ReviewType=#ReviewType#
      WHERE UserId = #UserId# AND WorkflowName = #WorkflowName#
    </update>

    <delete id="xqp_WorkflowNotify_Delete" parameterClass="guid">
      DELETE FROM xqp_WorkflowNotify WHERE UserId = #value#
    </delete>
    
    <select id="xqp_WorkflowNotify_Select_Notify_ByUserAndWorkflow" parameterClass="Hashtable" resultClass="WorkflowNotify">
      <![CDATA[
      SELECT wn.UserId, wn.WorkflowName, wn.NotifyType,wn.ReviewType
      FROM xqp_WorkflowNotify wn 
            LEFT JOIN  bw_Users u ON wn.UserId = u.UserId
      WHERE (u.UserName = #UserName#) AND wn.WorkflowName = (
            SELECT WorkflowName FROM bwwf_Workflows WHERE WorkflowId = #WorkflowId#
      )
      ]]>
    </select>

    <select id="xqp_WorkflowNotify_Select_NotifyType" parameterClass="Hashtable" resultClass="int">
      <![CDATA[
      SELECT wn.NotifyType
      FROM xqp_WorkflowNotify wn 
            LEFT JOIN  bw_Users u ON wn.UserId = u.UserId
      WHERE (u.UserName = #UserName#) AND wn.WorkflowName = (
            SELECT WorkflowName FROM bwwf_Workflows 
            WHERE WorkflowId = (
                SELECT WorkflowId FROM vw_bwwf_Tracking_Activities_All_Ext
                WHERE ActivityInstanceId = #ActivityInstanceId#
            )
      )
      ]]>
    </select>

    <select id="xqp_WorkflowNotify_Select_ReviewType" parameterClass="Hashtable" resultClass="int">
      <![CDATA[
      SELECT wn.ReviewType
      FROM xqp_WorkflowNotify wn 
            LEFT JOIN  bw_Users u ON wn.UserId = u.UserId
      WHERE (u.UserName = #UserName#) AND wn.WorkflowName = (
            SELECT WorkflowName FROM bwwf_Workflows 
            WHERE WorkflowId = (
                SELECT WorkflowId FROM vw_bwwf_Tracking_Activities_All_Ext
                WHERE ActivityInstanceId = #ActivityInstanceId#
            )
      )
      ]]>
    </select>
    <!-- Workflow Notify Setting (end)-->

    <!-- Workflow Notify Actor (begin)-->
    <select id="xqp_WorkflowNotifyActors_Select_Current" parameterClass="guid" resultMap="WorkflowNotifyActorResult">
      <![CDATA[
       select tt.ActivityInstanceId, activity.ActivityName, tt.OperateType, tt.UserName, u.RealName, u.Email, u.Mobile, u.EmployeeId, ISNULL(wny.NotifyType, 1) NotifyType, tw.Title
        from bwwf_Tracking_Todo as tt
            left join bwwf_Tracking_Activities as ta on tt.ActivityInstanceId = ta.ActivityInstanceId
            left join bwwf_Activities as a on a.ActivityId = ta.ActivityId
            left join bwwf_Tracking_Workflows as tw on tw.WorkflowInstanceId = ta.WorkflowInstanceId
            left join bwwf_Workflows w ON w.WorkflowId = tw.WorkflowId
            left join bw_Users u on tt.UserName = u. UserName
            left join bwwf_Activities as activity on ta.ActivityId = activity.ActivityId
	          left join xqp_WorkflowNotify wny on wny.UserId = u.UserId and wny.WorkflowName = w.WorkflowName
      WHERE tt.ActivityInstanceId = #value# and u.status>-1
      ]]>
    </select>
    <select id="xqp_WorkflowNotifyActors_Select_Next" parameterClass="guid" resultMap="WorkflowNotifyActorResult">
      <![CDATA[
        select tt.ActivityInstanceId, activity.ActivityName, tt.OperateType, tt.UserName, u.RealName, u.Email, u.Mobile, u.EmployeeId, ISNULL(wny.NotifyType, 1) NotifyType, w.Title
        from bwwf_Tracking_Todo as tt
              left join bwwf_Tracking_Activities as ta on tt.ActivityInstanceId = ta.ActivityInstanceId
              left join bwwf_Tracking_Workflows as w on w.WorkflowInstanceId = ta.WorkflowInstanceId
              left join bwwf_Activities as a on a.ActivityId = ta.ActivityId
              left join bw_Users u on tt.UserName = u. UserName
	            left join xqp_WorkflowNotify wny on wny.UserId = u.UserId and wny.WorkflowName = (
		            select workflowName from bwwf_Workflows where WorkflowId = w.WorkflowId
	            )
		         left join bwwf_Activities as activity on ta.ActivityId = activity.ActivityId
        where ta.PrevSetId = (
        	  select top 1 SetId from bwwf_Tracking_Activities_Set 
			      where ActivityInstanceId = #value#
         ) and u.status>-1
      ]]>
    </select>
    <!-- Workflow Notify Actor (end)-->

    <!-- Workflow Notify Begin-->
    <insert id="xqp_WorkflowReminders_Insert" parameterClass="Hashtable">
      INSERT INTO xqp_Reminders
      (MessageType, MessageFrom, MessageTo, MessageBody, CreatedTime, ActivityInstanceId, SendTimes, IsCompleted)
      VALUES
      (#MessageType#, #MessageFrom#, #MessageTo#, #MessageBody#, getdate(), #ActivityInstanceId#, 0, 0)
    </insert>
    <!-- Workflow Notify End-->
    <!-- Workflow Message Begin-->
    <select id="bwdf_MessageTemplate_Select_Fields_By_WorkflowInstanceId" parameterClass="guid" resultClass="FormField" >
      <![CDATA[
      SELECT iis.Id, iis.FormItemDefinitionId, iis.FormInstanceId, iis.Value_Str AS Value, iis.Value_Decimal AS DecimalValue, iis.Value_Text AS TextValue,  ids.FName AS FieldName, ids.ItemDataType
      FROM  bwdf_FormItemInstances AS iis 
                 LEFT JOIN  bwdf_FormItemDefinitions AS ids ON iis.FormItemDefinitionId = ids.Id
      WHERE iis.FormInstanceId =#value#
      ORDER BY ids.FName 
      ]]>
    </select>
    <select id="bwdf_MessageTemplate_Select_PrevActors_By_ActivitynstanceId" parameterClass="guid" resultClass="BasicUser" >
      <!--<![CDATA[
      SELECT u.UserName, u.RealName
      FROM  vw_bwwf_Tracking_Activities_All tc
              LEFT JOIN bw_Users u ON u.UserName = tc.Actor
      WHERE (tc.IsCompleted = 1) AND (tc.Actor IS NOT NULL) AND ActivityInstanceId IN(
              SELECT ActivityInstanceId FROM bwwf_Tracking_Activities_Set WHERE SetId = (
                    SELECT PrevSetId FROM vw_bwwf_Tracking_Activities_All WHERE ActivityInstanceId = #value#
              )
      )
      ]]>-->
      <![CDATA[
        SELECT u.UserName, u.RealName
      FROM  bwwf_tracking_activities_completed as tc
              inner JOIN bw_Users as u ON u.UserName = tc.Actor
      inner join (select ActivityInstanceId from(
                  SELECT ActivityInstanceId FROM bwwf_Tracking_Activities_Set WHERE SetId = (
                    SELECT PrevSetId FROM bwwf_tracking_activities_completed WHERE ActivityInstanceId = #value#
              )
              union
              SELECT ActivityInstanceId FROM bwwf_Tracking_Activities_Set WHERE SetId = (
                    SELECT PrevSetId FROM bwwf_tracking_activities WHERE ActivityInstanceId = #value#
              ) 
      )as f) as a on tc.activityinstanceid=a.activityinstanceid
      ]]>
    </select>
    <!-- Workflow Message End-->

    <select id="bwdf_FormFields_Select_Count_By_FieldName" parameterClass="Hashtable" resultClass="int" >
      <![CDATA[
      SELECT Count(0) FROM bwdf_FormItemDefinitions
      WHERE (FormDefinitionId = #FormDefinitionId#) AND (FName = #FName#) AND [ID] <> #ID#
      ]]>
    </select>
    <!-- Workflow Review Begin-->

    <insert id="bwwf_Tracking_ToReview_Insert" parameterClass="ToReview">
      INSERT INTO bwwf_Tracking_ToReview
      (ActivityInstanceId, UserName, State, ReviewTime, Sender, ActivityId, SenderActivityInstanceId, CreatedTime)
      VALUES
      (#ActivityInstanceId#, #UserName#, 0, #ReviewTime#, #Sender#, #ActivityId#, #SenderActivityInstanceId#, getdate())
    </insert>
    <update id="bwwf_Tracking_ToReview_Update_Review_ByID" parameterClass="Hashtable">
      UPDATE bwwf_Tracking_ToReview
      SET State = #State#, ReviewTime=#ReviewTime#
      WHERE [ID] = #ID#
    </update>
    <update id="bwwf_Tracking_ToReview_Update_Review_ByUser" parameterClass="Hashtable">
      UPDATE bwwf_Tracking_ToReview
      SET State = #State#, ReviewTime=getdate()
      WHERE (ActivityInstanceId = #ActivityInstanceId#) AND ([UserName] = #UserName#)
    </update>
    <select id="bwwf_Tracking_ToReview_Select_Count_ByUser" parameterClass="Hashtable" resultClass="int">
      SELECT COUNT(0) FROM bwwf_Tracking_ToReview
      WHERE (State = 0) AND (UserName = #UserName#) AND (ActivityInstanceId = #ActivityInstanceId#)
    </select>
    <!-- Workflow Review End-->

    <!--CZ_ActivityInstance-->
    <select id="cz_bwwf_ActivityInstance_Select_WorkflowInstanceId" resultClass="CZActivityInstance" parameterClass="guid">
      <![CDATA[
      select ActivityInstanceId,PrevSetId,WorkflowInstanceId,ActivityId,IsCompleted,OperateType,CreatedTime,
          FinishedTime,Actor,Command,Reason,ExternalEntityType,ExternalEntityId, ActorDescription,
          ActivityName,WorkItemTitle, CountersignedCondition, PreviousActors, PrintCount
      from vw_bwwf_Tracking_Activities_All_Ext
      where WorkflowInstanceId = #value#
      order by CreatedTime
      ]]>
    </select>

    <select id="cz_bwwf_ActivityInstance_Select_ActivityInstanceId" resultClass="CZActivityInstance" parameterClass="guid">
      <![CDATA[
      select ActivityInstanceId,PrevSetId,WorkflowInstanceId,ActivityId,IsCompleted,OperateType,CreatedTime,
          FinishedTime,Actor,Command,Reason,ExternalEntityType,ExternalEntityId, ActorDescription,
          ActivityName,WorkItemTitle, CountersignedCondition, PreviousActors, PrintCount
      from vw_bwwf_Tracking_Activities_All_Ext
      where ActivityInstanceId = #value#
      order by CreatedTime
      ]]>
    </select>

    <select id="bwwf_ActivityInstance_Select_PrevActivities_By_PrevSetId" resultClass="CZActivityInstance" parameterClass="guid">
      <![CDATA[
      SELECT  ta.ActivityInstanceId,PrevSetId,WorkflowInstanceId,ta.ActivityId,IsCompleted,OperateType,CreatedTime,
            FinishedTime,Actor,Command,Reason,CountersignedCondition,ExternalEntityType,ExternalEntityId, ActorDescription, 
            ActivityName, WorkItemTitle, PreviousActors, PrintCount
      FROM vw_bwwf_Tracking_Activities_All_Ext ta    
      left join bwwf_tracking_activities_set bset      
      on ta.ActivityInstanceId = bset.activityinstanceid
      where bset.setid = #value#
      ]]>
    </select>
    
    <update id="cz_bwwf_ActivityInstance_Update" parameterClass="CZActivityInstance">
      <![CDATA[
      Update bwwf_Tracking_Activities set PrintCount = isnull(PrintCount,0) + 1
      where ActivityInstanceId = #ActivityInstanceId#
      ]]>
    </update>
    <!--CZ_ActivityInstance End-->
    
    <!--CZ_ActivityDefinition-->
    <select id="cz_bwwf_ActivityDefinition_Select_WorkflowInstanceId" resultClass="CZActivityDefinition" parameterClass="guid">
      <![CDATA[
      SELECT WorkflowId,ActivityId,ActivityName,State,SortOrder,PrevActivitySetId,NextActivitySetId,JoinCondition,SplitCondition,
      CommandRules,ExecutionHandler,PostHandler,AllocatorResource,AllocatorUsers,ExtendAllocators,ExtendAllocatorArgs,DefaultAllocator,DecisionType,DecisionParser,CountersignedCondition,ParallelActivitySetId,RejectOption,
      CanPrint,isnull(PrintAmount, -1) PrintAmount, isnull(CanEdit,1) CanEdit,ReturnToPrev,isnull(IsMobile,1) as IsMobile,isnull(IsTimeOutContinue,0) as IsTimeOutContinue
      FROM bwwf_Activities
      WHERE  WorkflowId = (SELECT WorkflowId FROM bwwf_Tracking_Workflows WHERE WorkflowInstanceId = #value#)
      ORDER BY SortOrder
      ]]>
    </select>

    <select id="cz_bwwf_ActivityDefinition_Select_ActivityId" resultClass="CZActivityDefinition" parameterClass="guid">
      <![CDATA[
      SELECT WorkflowId,ActivityId,ActivityName,State,SortOrder,PrevActivitySetId,NextActivitySetId,JoinCondition,SplitCondition,
      CommandRules,ExecutionHandler,PostHandler,AllocatorResource,AllocatorUsers,ExtendAllocators,ExtendAllocatorArgs,DefaultAllocator,DecisionType,DecisionParser,CountersignedCondition,ParallelActivitySetId,RejectOption,
      CanPrint,isnull(PrintAmount, -1) PrintAmount, isnull(CanEdit,1) CanEdit,ReturnToPrev,isnull(IsMobile,1) as IsMobile,isnull(IsTimeOutContinue,0) as IsTimeOutContinue
      FROM bwwf_Activities
      WHERE  ActivityId = #value#
      ]]>
    </select>

    <update id="cz_bwwf_ActivityDefinition_Update" parameterClass="CZActivityDefinition">
      <![CDATA[
      Update bwwf_Activities set CanPrint = #CanPrint#, PrintAmount = #PrintAmount#, CanEdit = #CanEdit#, ReturnToPrev=#ReturnToPrev#,IsMobile=#IsMobile#,IsTimeOutContinue=#IsTimeOutContinue#
      where activityId = #ActivityId#
      ]]>
    </update>
    <!--CZ_ActivityDefinition End-->

    <!--CZ_WorkflowInstance-->
    <select id="cz_bwwf_WorkflowInstance_Select_Wiid" resultClass="CZWorkflowInstance" parameterClass="guid">
      SELECT tw.WorkflowInstanceId, tw.WorkflowId, tw.SheetId, tw.State, tw.Creator, tw.StartedTime, tw.FinishedTime,
      tw.Title, tw.Secrecy, tw.Urgency, tw.Importance,tw.ExpectFinishedTime, tw.Requirement, tw.PrintCount
      FROM bwwf_Tracking_Workflows tw
      <dynamic prepend="where">
        <isParameterPresent>
          tw.WorkflowInstanceId = #value#
        </isParameterPresent>
      </dynamic>
    </select>
    <update id="cz_bwwf_WorkflowInstance_Update" parameterClass="CZWorkflowInstance">
      <![CDATA[
      Update bwwf_Tracking_Workflows set PrintCount = isnull(PrintCount,0) + 1
      where workflowinstanceid = #WorkflowInstanceId#
      ]]>
    </update>
    <insert id="bwwf_WorkflowInstance_History_Insert" parameterClass="guid">
      INSERT INTO [dbo].[bwwf_Tracking_Workflows_History]
      ([WorkflowInstanceId]
      ,[WorkflowId]
      ,[SheetId]
      ,[State]
      ,[Creator]
      ,[StartedTime]
      ,[FinishedTime]
      ,[Title]
      ,[Secrecy]
      ,[Urgency]
      ,[Importance]
      ,[ExpectFinishedTime]
      ,[Requirement]
      ,[CommentCount]
      ,[PrintCount])
      select [WorkflowInstanceId]
      ,[WorkflowId]
      ,[SheetId]
      ,[State]
      ,[Creator]
      ,[StartedTime]
      ,[FinishedTime]
      ,[Title]
      ,[Secrecy]
      ,[Urgency]
      ,[Importance]
      ,[ExpectFinishedTime]
      ,[Requirement]
      ,[CommentCount]
      ,[PrintCount] from bwwf_Tracking_Workflows where workflowinstanceid = #value#
    </insert>
    <!--CZ_WorkflowInstance End-->

    <!--sms profile(begin)-->

    <insert id="xqp_SMSProfile_Insert" parameterClass="SMSProfile">
      INSERT INTO xqp_SMSProfile
      (ActivityRejectMessage, AssignmentMessage, FeedbackSuccessMessage, FeedbackErrorMessage, ReceiveInvalidMessage, LastReceiveInvalidMessage, GratuityReplyMessage, MaxInvalidSMS)
      VALUES
      (#ActivityRejectMessage#, #AssignmentMessage#, #FeedbackSuccessMessage#, #FeedbackErrorMessage#, #ReceiveInvalidMessage#, #LastReceiveInvalidMessage#, #GratuityReplyMessage#, 5)
    </insert>
    <update id="xqp_SMSProfile_Update_ByID" parameterClass="SMSProfile">
      <![CDATA[
      UPDATE xqp_SMSProfile
      SET ActivityRejectMessage = #ActivityRejectMessage#, AssignmentMessage = #AssignmentMessage#, 
            FeedbackSuccessMessage=#FeedbackSuccessMessage#, FeedbackErrorMessage=#FeedbackErrorMessage#,
            ReceiveInvalidMessage=#ReceiveInvalidMessage#, LastReceiveInvalidMessage=#LastReceiveInvalidMessage#, 
            GratuityReplyMessage=#GratuityReplyMessage#
      WHERE [ID] = #ID#
      ]]>
    </update>
    <select id="xqp_SMSProfile_Select_Profile" resultClass="SMSProfile">
      <![CDATA[
      select TOP 1  [ID], ActivityRejectMessage, AssignmentMessage, FeedbackSuccessMessage, FeedbackErrorMessage, ReceiveInvalidMessage, 
              LastReceiveInvalidMessage, GratuityReplyMessage, GratuityWorkflowName, GratuityNotifyActivity, MaxInvalidSMS
      FROM  xqp_SMSProfile
      order by [ID] desc
      ]]>
    </select>
    <!--sms profile(end)-->

    <!--activity profile(begin)-->
    <insert id="xqp_ActivityProfile_Insert" parameterClass="ActivityProfile">
      INSERT INTO xqp_Activities_Profile
      (WorkflowName, ActivityName, IsReview, ReviewActors, ReviewActorCount, ReviewValidateType, Visible, ExtendAllocators, ExtendAllocatorArgs)
      VALUES
      (#WorkflowName#, #ActivityName#, #IsReview#, #ReviewActors#, #ReviewActorCount#, #ReviewValidateType#, #Visible#, #ExtendAllocators#, #ExtendAllocatorArgs#)
    </insert>

    <insert id="xqp_ActivityProfile_InsertOne" parameterClass="ActivityProfile"> 
      INSERT INTO xqp_Activities_Profile
      (WorkflowName, ActivityName, IsReview, ReviewActors, ReviewActorCount, ReviewValidateType, Visible,ManageVisible,ManageActorCount)
      VALUES
      (#WorkflowName#, #ActivityName#, #IsReview#, #ReviewActors#, #ReviewActorCount#, #ReviewValidateType#, #Visible#,#ManageVisible#,#ManageActorCount#)
    </insert>
    
    <update id="xqp_ActivityProfile_UpdateReview_ByID" parameterClass="ActivityProfile">
      <![CDATA[
      UPDATE xqp_Activities_Profile
      SET IsReview = #IsReview#, ReviewActors = #ReviewActors#, ReviewActorCount=#ReviewActorCount#, ReviewValidateType=#ReviewValidateType#
      , ExtendAllocators = #ExtendAllocators#, ExtendAllocatorArgs = #ExtendAllocatorArgs#
      WHERE [ID] = #ID#
      ]]>
    </update>

    <update id="xqp_ActivityProfile_UpdateReview_ByIDOne" parameterClass="ActivityProfile">
      <![CDATA[
      UPDATE xqp_Activities_Profile
      set ManageVisible=#ManageVisible#,ManageActorCount=#ManageActorCount#
      WHERE [ID] = #ID#
      ]]>
    </update>

    <select id="xqp_ActivityProfile_Select_Profiles_ByWorkflowId" parameterClass="guid" resultClass="ActivityProfile">
      <![CDATA[
          SELECT a.ActivityId, w.WorkflowName, a.ActivityName, ISNULL(ap.ID, -1) AS [ID], ISNULL(ap.IsReview, 0) AS IsReview,  ap.ReviewActors, 
                    ISNULL(ReviewActorCount, -1) AS ReviewActorCount, ReviewValidateType, ap.Visible,ISNULL(ManageVisible, 0) AS ManageVisible,ISNULL(ManageActorCount, -1) AS ManageActorCount
                    , ap.ExtendAllocators, ap.ExtendAllocatorArgs
          FROM bwwf_Activities a
	                  LEFT JOIN bwwf_Workflows w ON a.WorkflowID = w.WorkflowId
	                  LEFT JOIN xqp_Activities_Profile ap ON ap.WorkflowName = w.WorkflowName AND ap.ActivityName = a.ActivityName
          WHERE  (a.WorkflowId = #value#) AND (a.State >=1)
          ORDER BY a.SortOrder
      ]]>
    </select>
    <select id="xqp_ActivityProfile_Select_Profiles_ByWorkflowAndActivityId" parameterClass="Hashtable" resultClass="ActivityProfile">
      <![CDATA[
          SELECT a.ActivityId, w.WorkflowName, a.ActivityName, ISNULL(ap.ID, -1) AS [ID], ISNULL(ap.IsReview, 0) AS IsReview,  ap.ReviewActors, 
                    ISNULL(ReviewActorCount, -1) AS ReviewActorCount, ReviewValidateType, ap.Visible,ISNULL(ManageVisible, 0) AS ManageVisible,ISNULL(ManageActorCount, -1) AS ManageActorCount
                    , ap.ExtendAllocators, ap.ExtendAllocatorArgs
          FROM bwwf_Activities a
	                  LEFT JOIN bwwf_Workflows w ON a.WorkflowID = w.WorkflowId
	                  LEFT JOIN xqp_Activities_Profile ap ON ap.WorkflowName = w.WorkflowName AND ap.ActivityName = a.ActivityName
          WHERE  (a.WorkflowId = #WorkflowId# AND a.ActivityId = #ActivityId#)
          ORDER BY a.SortOrder
      ]]>
    </select>
    <select id="xqp_ActivityProfile_Select_NextProfiles_ByWorkflowAndActivityId" parameterClass="Hashtable" resultClass="ActivityProfile">
      <![CDATA[
          SELECT a.ActivityId, w.WorkflowName, a.ActivityName, ISNULL(ap.ID, -1) AS [ID], ISNULL(ap.IsReview, 0) AS IsReview,  ap.ReviewActors, 
                    ISNULL(ReviewActorCount, -1) AS ReviewActorCount, ReviewValidateType, ap.Visible
                    , ap.ExtendAllocators, ap.ExtendAllocatorArgs
          FROM bwwf_Activities a
	                  LEFT JOIN bwwf_Workflows w ON a.WorkflowID = w.WorkflowId
	                  LEFT JOIN xqp_Activities_Profile ap ON ap.WorkflowName = w.WorkflowName AND ap.ActivityName = a.ActivityName
          WHERE (a.WorkflowId = #WorkflowId#) AND (a.ActivityId IN(
                    SELECT ActivityId FROM bwwf_ActivitySet WHERE SetId = (
                        SELECT NextActivitySetId FROM bwwf_Activities WHERE (ActivityId=#ActivityId#)
                    )
          ))
          ORDER BY a.SortOrder
      ]]>
    </select>
    <select id="xqp_ActivityProfile_Select_StartProfiles_ByWorkflowId" parameterClass="guid" resultClass="ActivityProfile">
      <![CDATA[
          SELECT a.ActivityId, w.WorkflowName, a.ActivityName, ISNULL(ap.ID, -1) AS [ID], ISNULL(ap.IsReview, 0) AS IsReview,  ap.ReviewActors, 
                    ISNULL(ReviewActorCount, -1) AS ReviewActorCount, ReviewValidateType, ap.Visible
                    , ap.ExtendAllocators, ap.ExtendAllocatorArgs
          FROM bwwf_Activities a
	                  LEFT JOIN bwwf_Workflows w ON a.WorkflowID = w.WorkflowId
	                  LEFT JOIN xqp_Activities_Profile ap ON ap.WorkflowName = w.WorkflowName AND ap.ActivityName = a.ActivityName
          WHERE (a.WorkflowId = #value#) AND (a.ActivityId IN(
                    SELECT ActivityId FROM bwwf_ActivitySet WHERE SetId = (
                        SELECT NextActivitySetId FROM bwwf_Activities WHERE [State] = 0 AND WorkflowId = #value#
                    )
          ))
          ORDER BY a.SortOrder
      ]]>
    </select>
    <!--activity profile(end)-->

    <!-- extension Workflow(begin) -->
    <select id="cz_WorkflowExtension_MyTasks_Select"  resultClass="System.Data.DataSet" parameterClass="Hashtable">
      <![CDATA[
     SELECT tw.WorkflowInstanceId,
          tw.startedtime,
          tw.finishedtime,
          tw.SheetId,
          tw.Title,
          tw.Urgency,
          W.WORKFLOWID,
          W.WorkflowName,
          ws.WorkflowAlias,
          ws.AliasImage,
          tw.Creator,
          wu.RealName CreatorName,
          ' ' as ActivityName,
          ' ' as CurrentActors
          FROM 
          (
          select distinct ta.WorkflowInstanceId from bwwf_Tracking_Act_Completed ta
          where ta.Actor = #Actor#
          )a  INNER join
          bwwf_Tracking_Workflows tw 
          on a.workflowinstanceid = tw.workflowinstanceid    
            INNER JOIN bw_Users wu
             ON tw.creator = wu.username
            INNER JOIN bwwf_Workflows W
             ON W.WorkflowId = tw.WorkflowId
            INNER JOIN bwwf_WorkflowSettings ws
             ON ws.WorkflowName = W.WorkflowName
        WHERE tw.state >= 2 
        and StartedTime between #BeginTime# and #EndTime#
        order by finishedtime DESC 
     ]]>
    </select>

    <select id="cz_WorkflowExtension_DoingTasks_Select"  resultClass="System.Data.DataSet" parameterClass="Hashtable">
      <![CDATA[
      SELECT tw.WorkflowInstanceId,
          tw.startedtime,
          a.finishedtime,
          tw.SheetId,
          tw.Title,
          tw.Urgency,
          W.WORKFLOWID,
          W.WorkflowName,
          ws.WorkflowAlias,
          ws.AliasImage,
          tw.Creator,
          tw.state,
          wu.RealName CreatorName,
          ' ' as ActivityName,
          ' ' as CurrentActors
          FROM 
          (
          select t.WorkflowInstanceId, t.finishedtime from(
          select ta.WorkflowInstanceId, max(ta.finishedtime) finishedtime from bwwf_Tracking_Activities_Completed ta
          where ta.Actor = #Actor# group by ta.WorkflowInstanceId) t
          )a  left join
          bwwf_Tracking_Workflows tw 
          on a.workflowinstanceid = tw.workflowinstanceid    
            INNER JOIN bw_Users wu
             ON tw.creator = wu.username
            INNER JOIN bwwf_Workflows W
             ON W.WorkflowId = tw.WorkflowId
            INNER JOIN bwwf_WorkflowSettings ws
             ON ws.WorkflowName = W.WorkflowName
        WHERE StartedTime between #BeginTime# and #EndTime#
        order by StartedTime DESC 
      ]]>
    </select>
    <select id="cz_WorkflowExtension_Mp_DoingTasks_Select"  resultClass="System.Data.DataSet" parameterClass="Hashtable">
      <![CDATA[
      SELECT tw.WorkflowInstanceId,
          tw.startedtime,
          a.finishedtime,
          tw.SheetId,
          tw.Title,
          tw.Urgency,
          W.WORKFLOWID,
          W.WorkflowName,
          ws.WorkflowAlias,
          ws.AliasImage,
          tw.Creator,
          tw.state,
          wu.RealName CreatorName,
          ' ' as ActivityName,
          ' ' as CurrentActors
          FROM 
          (
          select t.WorkflowInstanceId, t.finishedtime from(
          select ta.WorkflowInstanceId, max(ta.finishedtime) finishedtime from bwwf_Tracking_Activities_Completed ta
          inner join bwwf_activities a on ta.activityid=a.activityid
          where ta.Actor = #Actor# and isnull(a.ismobile,1) = 1 group by ta.WorkflowInstanceId) t
          )a  left join
          bwwf_Tracking_Workflows tw 
          on a.workflowinstanceid = tw.workflowinstanceid    
            INNER JOIN bw_Users wu
             ON tw.creator = wu.username
            INNER JOIN bwwf_Workflows W
             ON W.WorkflowId = tw.WorkflowId
            INNER JOIN bwwf_WorkflowSettings ws
             ON ws.WorkflowName = W.WorkflowName
            INNER JOIN dbo.xqp_WorkflowSettings st 
            on W.WorkflowName=st.WorkflowName
        WHERE StartedTime between #BeginTime# and #EndTime# and ISNULL(st.ismobile,1)=1
        order by StartedTime DESC 
      ]]>
    </select>
    <!-- extension Workflow(end) -->
    
    <!--CZRegistSystem-->
    <select id="CZ_RegistSystem_Select"  resultClass="CZRegistSystem">
      <![CDATA[
      Select SystemId,SystemName,RealName,Password,Email,Tel,Status,CreatedTime,Creator,LastModifier,LastModTime
      from bw_System where Status = 1
      ]]>
    </select>

    <select id="CZ_RegistSystem_Select_Id"  resultClass="CZRegistSystem" parameterClass="Guid">
      <![CDATA[
      Select SystemId,SystemName,RealName,Password,Email,Tel,Status,CreatedTime,Creator,LastModifier,LastModTime
      from bw_System where SystemID=#value#
      ]]>
    </select>

    <select id="CZ_RegistSystem_Select_Name"  resultClass="CZRegistSystem" parameterClass="string">
      <![CDATA[
      Select SystemId,SystemName,RealName,Password,Email,Tel,Status,CreatedTime,Creator,LastModifier,LastModTime
      from bw_System where SystemName=#value#
      ]]>
    </select>

    <insert id="CZ_RegistSystem_Insert" parameterClass="CZRegistSystem">
      <![CDATA[
      insert into bw_System (SystemId,SystemName,RealName,Password,Email,Tel,Status,CreatedTime,Creator,LastModifier,LastModTime)
      values
      (#SystemId#,#SystemName#,#RealName#,#Password#,#Email#,#Tel#,#Status#,#CreatedTime#,#Creator#,#LastModifier#,#LastModTime#)
      ]]>
    </insert>

    <update id="CZ_RegistSystem_Update" parameterClass="CZRegistSystem">
      <![CDATA[
      update bw_System set SystemName=#SystemName#,RealName=#RealName#,Password=#Password#,Email=#Email#,Tel=#Tel#,LastModifier=#LastModifier#,LastModTime=#LastModTime#
      where SystemId = #SystemId#
      ]]>
    </update>
    <!--CZRegistSystem End-->

    <!--CZWorkflowDefinition-->
    <select id="CZ_HistoryWorkflows_Select_All"  resultClass="CZWorkflowDefinition">
      <![CDATA[
      SELECT a.WorkflowId, a.WorkflowName, a.Owner, a.Enabled, a.IsCurrent, a.Version, a.Creator, a.Remark,
          a.LastModifier, a.CreatedTime, a.LastModTime, a.IsDeleted, a.WorkflowAlias,a.Version
      FROM vw_bwwf_Workflows_Detail a
      inner join bwwf_Workflows b on a.WorkflowName=b.WorkflowName
      and (b.IsDeleted = 0) and (b.Enabled = 1) AND (b.IsCurrent = 1)
      WHERE (a.IsDeleted = 1) or (a.Enabled = 0) OR (a.IsCurrent = 0)
      ORDER BY WorkflowAlias asc,a.Version desc,a.LastModTime desc
      ]]>
    </select>
    <!--更新流程备注-->
    <update id="bwwf_Workflow_UpdateRemark" parameterClass="Botwave.Workflow.Domain.WorkflowDefinition">
      UPDATE bwwf_Workflows SET Remark = #Remark# WHERE WorkflowId = #WorkflowId#
    </update>
    <!--CZWorkflowDefinition End-->
  </statements>
</sqlMap>
